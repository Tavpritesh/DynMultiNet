// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_DynMultiNet_RCPPEXPORTS_H_GEN_
#define RCPP_DynMultiNet_RCPPEXPORTS_H_GEN_

#include <RcppArmadillo.h>
#include <Rcpp.h>

namespace DynMultiNet {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("DynMultiNet", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("DynMultiNet", "_DynMultiNet_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in DynMultiNet");
            }
        }
    }

    inline SEXP c_initialize1(SEXP Data, SEXP DIMS, SEXP Yy, SEXP XSCALE, SEXP BETAIN, SEXP BETAOUT, SEXP WW) {
        typedef SEXP(*Ptr_c_initialize1)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_c_initialize1 p_c_initialize1 = NULL;
        if (p_c_initialize1 == NULL) {
            validateSignature("SEXP(*c_initialize1)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP)");
            p_c_initialize1 = (Ptr_c_initialize1)R_GetCCallable("DynMultiNet", "_DynMultiNet_c_initialize1");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_c_initialize1(Shield<SEXP>(Rcpp::wrap(Data)), Shield<SEXP>(Rcpp::wrap(DIMS)), Shield<SEXP>(Rcpp::wrap(Yy)), Shield<SEXP>(Rcpp::wrap(XSCALE)), Shield<SEXP>(Rcpp::wrap(BETAIN)), Shield<SEXP>(Rcpp::wrap(BETAOUT)), Shield<SEXP>(Rcpp::wrap(WW)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline SEXP c_initialize1_grad(SEXP Data, SEXP DIMS, SEXP Yy, SEXP XSCALE, SEXP BETAIN, SEXP BETAOUT, SEXP WW) {
        typedef SEXP(*Ptr_c_initialize1_grad)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_c_initialize1_grad p_c_initialize1_grad = NULL;
        if (p_c_initialize1_grad == NULL) {
            validateSignature("SEXP(*c_initialize1_grad)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP)");
            p_c_initialize1_grad = (Ptr_c_initialize1_grad)R_GetCCallable("DynMultiNet", "_DynMultiNet_c_initialize1_grad");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_c_initialize1_grad(Shield<SEXP>(Rcpp::wrap(Data)), Shield<SEXP>(Rcpp::wrap(DIMS)), Shield<SEXP>(Rcpp::wrap(Yy)), Shield<SEXP>(Rcpp::wrap(XSCALE)), Shield<SEXP>(Rcpp::wrap(BETAIN)), Shield<SEXP>(Rcpp::wrap(BETAOUT)), Shield<SEXP>(Rcpp::wrap(WW)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline SEXP c_update2(SEXP Xitm1, SEXP DIMS, SEXP TUNEX, SEXP Yy, SEXP BETAIN, SEXP BETAOUT, SEXP TUNEBIO, SEXP WW, SEXP t2X, SEXP s2X, SEXP xiBIN, SEXP xiBOUT, SEXP nuBIN, SEXP nuBOUT, SEXP CAUCHY, SEXP RNORMS, SEXP RNORMSBIO, SEXP ELOUT, SEXP ELIN, SEXP SUBSEQ, SEXP DEG) {
        typedef SEXP(*Ptr_c_update2)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_c_update2 p_c_update2 = NULL;
        if (p_c_update2 == NULL) {
            validateSignature("SEXP(*c_update2)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP)");
            p_c_update2 = (Ptr_c_update2)R_GetCCallable("DynMultiNet", "_DynMultiNet_c_update2");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_c_update2(Shield<SEXP>(Rcpp::wrap(Xitm1)), Shield<SEXP>(Rcpp::wrap(DIMS)), Shield<SEXP>(Rcpp::wrap(TUNEX)), Shield<SEXP>(Rcpp::wrap(Yy)), Shield<SEXP>(Rcpp::wrap(BETAIN)), Shield<SEXP>(Rcpp::wrap(BETAOUT)), Shield<SEXP>(Rcpp::wrap(TUNEBIO)), Shield<SEXP>(Rcpp::wrap(WW)), Shield<SEXP>(Rcpp::wrap(t2X)), Shield<SEXP>(Rcpp::wrap(s2X)), Shield<SEXP>(Rcpp::wrap(xiBIN)), Shield<SEXP>(Rcpp::wrap(xiBOUT)), Shield<SEXP>(Rcpp::wrap(nuBIN)), Shield<SEXP>(Rcpp::wrap(nuBOUT)), Shield<SEXP>(Rcpp::wrap(CAUCHY)), Shield<SEXP>(Rcpp::wrap(RNORMS)), Shield<SEXP>(Rcpp::wrap(RNORMSBIO)), Shield<SEXP>(Rcpp::wrap(ELOUT)), Shield<SEXP>(Rcpp::wrap(ELIN)), Shield<SEXP>(Rcpp::wrap(SUBSEQ)), Shield<SEXP>(Rcpp::wrap(DEG)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline SEXP c_update1(SEXP Xitm1, SEXP DIMS, SEXP TUNEX, SEXP Yy, SEXP BETAIN, SEXP BETAOUT, SEXP TUNEBIO, SEXP WW, SEXP t2X, SEXP s2X, SEXP xiBIN, SEXP xiBOUT, SEXP nuBIN, SEXP nuBOUT, SEXP CAUCHY, SEXP RNORMS, SEXP RNORMSBIO) {
        typedef SEXP(*Ptr_c_update1)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_c_update1 p_c_update1 = NULL;
        if (p_c_update1 == NULL) {
            validateSignature("SEXP(*c_update1)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP)");
            p_c_update1 = (Ptr_c_update1)R_GetCCallable("DynMultiNet", "_DynMultiNet_c_update1");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_c_update1(Shield<SEXP>(Rcpp::wrap(Xitm1)), Shield<SEXP>(Rcpp::wrap(DIMS)), Shield<SEXP>(Rcpp::wrap(TUNEX)), Shield<SEXP>(Rcpp::wrap(Yy)), Shield<SEXP>(Rcpp::wrap(BETAIN)), Shield<SEXP>(Rcpp::wrap(BETAOUT)), Shield<SEXP>(Rcpp::wrap(TUNEBIO)), Shield<SEXP>(Rcpp::wrap(WW)), Shield<SEXP>(Rcpp::wrap(t2X)), Shield<SEXP>(Rcpp::wrap(s2X)), Shield<SEXP>(Rcpp::wrap(xiBIN)), Shield<SEXP>(Rcpp::wrap(xiBOUT)), Shield<SEXP>(Rcpp::wrap(nuBIN)), Shield<SEXP>(Rcpp::wrap(nuBOUT)), Shield<SEXP>(Rcpp::wrap(CAUCHY)), Shield<SEXP>(Rcpp::wrap(RNORMS)), Shield<SEXP>(Rcpp::wrap(RNORMSBIO)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline SEXP c_t2s2Parms(SEXP DATA, SEXP DIMS, SEXP THETAT, SEXP THETAS, SEXP PHIT, SEXP PHIS) {
        typedef SEXP(*Ptr_c_t2s2Parms)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_c_t2s2Parms p_c_t2s2Parms = NULL;
        if (p_c_t2s2Parms == NULL) {
            validateSignature("SEXP(*c_t2s2Parms)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP)");
            p_c_t2s2Parms = (Ptr_c_t2s2Parms)R_GetCCallable("DynMultiNet", "_DynMultiNet_c_t2s2Parms");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_c_t2s2Parms(Shield<SEXP>(Rcpp::wrap(DATA)), Shield<SEXP>(Rcpp::wrap(DIMS)), Shield<SEXP>(Rcpp::wrap(THETAT)), Shield<SEXP>(Rcpp::wrap(THETAS)), Shield<SEXP>(Rcpp::wrap(PHIT)), Shield<SEXP>(Rcpp::wrap(PHIS)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline SEXP c_WAccProb2(SEXP Data, SEXP DIMS, SEXP Yy, SEXP BETAIN, SEXP BETAOUT, SEXP TUNEW, SEXP WWOld, SEXP WWNew, SEXP ELOUT, SEXP ELIN, SEXP SUBSEQ, SEXP DEG) {
        typedef SEXP(*Ptr_c_WAccProb2)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_c_WAccProb2 p_c_WAccProb2 = NULL;
        if (p_c_WAccProb2 == NULL) {
            validateSignature("SEXP(*c_WAccProb2)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP)");
            p_c_WAccProb2 = (Ptr_c_WAccProb2)R_GetCCallable("DynMultiNet", "_DynMultiNet_c_WAccProb2");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_c_WAccProb2(Shield<SEXP>(Rcpp::wrap(Data)), Shield<SEXP>(Rcpp::wrap(DIMS)), Shield<SEXP>(Rcpp::wrap(Yy)), Shield<SEXP>(Rcpp::wrap(BETAIN)), Shield<SEXP>(Rcpp::wrap(BETAOUT)), Shield<SEXP>(Rcpp::wrap(TUNEW)), Shield<SEXP>(Rcpp::wrap(WWOld)), Shield<SEXP>(Rcpp::wrap(WWNew)), Shield<SEXP>(Rcpp::wrap(ELOUT)), Shield<SEXP>(Rcpp::wrap(ELIN)), Shield<SEXP>(Rcpp::wrap(SUBSEQ)), Shield<SEXP>(Rcpp::wrap(DEG)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline SEXP c_WAccProb1(SEXP Data, SEXP DIMS, SEXP Yy, SEXP BETAIN, SEXP BETAOUT, SEXP TUNEW, SEXP WWOld, SEXP WWNew) {
        typedef SEXP(*Ptr_c_WAccProb1)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_c_WAccProb1 p_c_WAccProb1 = NULL;
        if (p_c_WAccProb1 == NULL) {
            validateSignature("SEXP(*c_WAccProb1)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP)");
            p_c_WAccProb1 = (Ptr_c_WAccProb1)R_GetCCallable("DynMultiNet", "_DynMultiNet_c_WAccProb1");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_c_WAccProb1(Shield<SEXP>(Rcpp::wrap(Data)), Shield<SEXP>(Rcpp::wrap(DIMS)), Shield<SEXP>(Rcpp::wrap(Yy)), Shield<SEXP>(Rcpp::wrap(BETAIN)), Shield<SEXP>(Rcpp::wrap(BETAOUT)), Shield<SEXP>(Rcpp::wrap(TUNEW)), Shield<SEXP>(Rcpp::wrap(WWOld)), Shield<SEXP>(Rcpp::wrap(WWNew)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline SEXP c_missing(SEXP Data, SEXP DIMS, SEXP MMM, SEXP Yy, SEXP Ttt, SEXP BETAIN, SEXP BETAOUT, SEXP WW) {
        typedef SEXP(*Ptr_c_missing)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_c_missing p_c_missing = NULL;
        if (p_c_missing == NULL) {
            validateSignature("SEXP(*c_missing)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP)");
            p_c_missing = (Ptr_c_missing)R_GetCCallable("DynMultiNet", "_DynMultiNet_c_missing");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_c_missing(Shield<SEXP>(Rcpp::wrap(Data)), Shield<SEXP>(Rcpp::wrap(DIMS)), Shield<SEXP>(Rcpp::wrap(MMM)), Shield<SEXP>(Rcpp::wrap(Yy)), Shield<SEXP>(Rcpp::wrap(Ttt)), Shield<SEXP>(Rcpp::wrap(BETAIN)), Shield<SEXP>(Rcpp::wrap(BETAOUT)), Shield<SEXP>(Rcpp::wrap(WW)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline SEXP c_postzeroprob(SEXP Xi1, SEXP Xi2, SEXP Xj1, SEXP Xj2, SEXP SS2, SEXP LAM, SEXP PP0) {
        typedef SEXP(*Ptr_c_postzeroprob)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_c_postzeroprob p_c_postzeroprob = NULL;
        if (p_c_postzeroprob == NULL) {
            validateSignature("SEXP(*c_postzeroprob)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP)");
            p_c_postzeroprob = (Ptr_c_postzeroprob)R_GetCCallable("DynMultiNet", "_DynMultiNet_c_postzeroprob");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_c_postzeroprob(Shield<SEXP>(Rcpp::wrap(Xi1)), Shield<SEXP>(Rcpp::wrap(Xi2)), Shield<SEXP>(Rcpp::wrap(Xj1)), Shield<SEXP>(Rcpp::wrap(Xj2)), Shield<SEXP>(Rcpp::wrap(SS2)), Shield<SEXP>(Rcpp::wrap(LAM)), Shield<SEXP>(Rcpp::wrap(PP0)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline SEXP c_prediction(SEXP EX, SEXP SIG2, SEXP X1T, SEXP X2T, SEXP BIN, SEXP BOUT, SEXP WW) {
        typedef SEXP(*Ptr_c_prediction)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_c_prediction p_c_prediction = NULL;
        if (p_c_prediction == NULL) {
            validateSignature("SEXP(*c_prediction)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP)");
            p_c_prediction = (Ptr_c_prediction)R_GetCCallable("DynMultiNet", "_DynMultiNet_c_prediction");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_c_prediction(Shield<SEXP>(Rcpp::wrap(EX)), Shield<SEXP>(Rcpp::wrap(SIG2)), Shield<SEXP>(Rcpp::wrap(X1T)), Shield<SEXP>(Rcpp::wrap(X2T)), Shield<SEXP>(Rcpp::wrap(BIN)), Shield<SEXP>(Rcpp::wrap(BOUT)), Shield<SEXP>(Rcpp::wrap(WW)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline Rcpp::List sample_baseline_t_link_cpp(arma::colvec eta_t, const arma::mat eta_t_cov_prior_inv, const arma::cube y_ijt, const arma::cube w_ijt, arma::cube gamma_ijt, const bool directed = false) {
        typedef SEXP(*Ptr_sample_baseline_t_link_cpp)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_sample_baseline_t_link_cpp p_sample_baseline_t_link_cpp = NULL;
        if (p_sample_baseline_t_link_cpp == NULL) {
            validateSignature("Rcpp::List(*sample_baseline_t_link_cpp)(arma::colvec,const arma::mat,const arma::cube,const arma::cube,arma::cube,const bool)");
            p_sample_baseline_t_link_cpp = (Ptr_sample_baseline_t_link_cpp)R_GetCCallable("DynMultiNet", "_DynMultiNet_sample_baseline_t_link_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_sample_baseline_t_link_cpp(Shield<SEXP>(Rcpp::wrap(eta_t)), Shield<SEXP>(Rcpp::wrap(eta_t_cov_prior_inv)), Shield<SEXP>(Rcpp::wrap(y_ijt)), Shield<SEXP>(Rcpp::wrap(w_ijt)), Shield<SEXP>(Rcpp::wrap(gamma_ijt)), Shield<SEXP>(Rcpp::wrap(directed)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List sample_coord_ith_link_cpp(arma::cube ab_ith, const arma::mat ab_t_sigma_prior_inv, const arma::colvec tau_h, const arma::cube y_ijt, const arma::cube w_ijt, arma::cube gamma_ijt) {
        typedef SEXP(*Ptr_sample_coord_ith_link_cpp)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_sample_coord_ith_link_cpp p_sample_coord_ith_link_cpp = NULL;
        if (p_sample_coord_ith_link_cpp == NULL) {
            validateSignature("Rcpp::List(*sample_coord_ith_link_cpp)(arma::cube,const arma::mat,const arma::colvec,const arma::cube,const arma::cube,arma::cube)");
            p_sample_coord_ith_link_cpp = (Ptr_sample_coord_ith_link_cpp)R_GetCCallable("DynMultiNet", "_DynMultiNet_sample_coord_ith_link_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_sample_coord_ith_link_cpp(Shield<SEXP>(Rcpp::wrap(ab_ith)), Shield<SEXP>(Rcpp::wrap(ab_t_sigma_prior_inv)), Shield<SEXP>(Rcpp::wrap(tau_h)), Shield<SEXP>(Rcpp::wrap(y_ijt)), Shield<SEXP>(Rcpp::wrap(w_ijt)), Shield<SEXP>(Rcpp::wrap(gamma_ijt)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List sample_coord_ith_shared_link_cpp(arma::cube ab_ith_shared, const arma::mat ab_t_sigma_prior_inv, const arma::colvec tau_h, const arma::field<arma::cube> y_ijtk, const arma::field<arma::cube> w_ijtk, arma::field<arma::cube> gamma_ijtk) {
        typedef SEXP(*Ptr_sample_coord_ith_shared_link_cpp)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_sample_coord_ith_shared_link_cpp p_sample_coord_ith_shared_link_cpp = NULL;
        if (p_sample_coord_ith_shared_link_cpp == NULL) {
            validateSignature("Rcpp::List(*sample_coord_ith_shared_link_cpp)(arma::cube,const arma::mat,const arma::colvec,const arma::field<arma::cube>,const arma::field<arma::cube>,arma::field<arma::cube>)");
            p_sample_coord_ith_shared_link_cpp = (Ptr_sample_coord_ith_shared_link_cpp)R_GetCCallable("DynMultiNet", "_DynMultiNet_sample_coord_ith_shared_link_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_sample_coord_ith_shared_link_cpp(Shield<SEXP>(Rcpp::wrap(ab_ith_shared)), Shield<SEXP>(Rcpp::wrap(ab_t_sigma_prior_inv)), Shield<SEXP>(Rcpp::wrap(tau_h)), Shield<SEXP>(Rcpp::wrap(y_ijtk)), Shield<SEXP>(Rcpp::wrap(w_ijtk)), Shield<SEXP>(Rcpp::wrap(gamma_ijtk)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List sample_coord_ith_link_dir_cpp(arma::cube ab_ith_send, arma::cube ab_ith_receive, const arma::mat ab_t_sigma_prior_inv, const arma::colvec tau_h_send, const arma::colvec tau_h_receive, const arma::cube y_ijt, const arma::cube w_ijt, arma::cube gamma_ijt) {
        typedef SEXP(*Ptr_sample_coord_ith_link_dir_cpp)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_sample_coord_ith_link_dir_cpp p_sample_coord_ith_link_dir_cpp = NULL;
        if (p_sample_coord_ith_link_dir_cpp == NULL) {
            validateSignature("Rcpp::List(*sample_coord_ith_link_dir_cpp)(arma::cube,arma::cube,const arma::mat,const arma::colvec,const arma::colvec,const arma::cube,const arma::cube,arma::cube)");
            p_sample_coord_ith_link_dir_cpp = (Ptr_sample_coord_ith_link_dir_cpp)R_GetCCallable("DynMultiNet", "_DynMultiNet_sample_coord_ith_link_dir_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_sample_coord_ith_link_dir_cpp(Shield<SEXP>(Rcpp::wrap(ab_ith_send)), Shield<SEXP>(Rcpp::wrap(ab_ith_receive)), Shield<SEXP>(Rcpp::wrap(ab_t_sigma_prior_inv)), Shield<SEXP>(Rcpp::wrap(tau_h_send)), Shield<SEXP>(Rcpp::wrap(tau_h_receive)), Shield<SEXP>(Rcpp::wrap(y_ijt)), Shield<SEXP>(Rcpp::wrap(w_ijt)), Shield<SEXP>(Rcpp::wrap(gamma_ijt)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List sample_coord_ith_shared_link_dir_cpp(arma::cube ab_ith_shared_send, arma::cube ab_ith_shared_receive, const arma::mat ab_t_sigma_prior_inv, const arma::colvec tau_h_shared_send, const arma::colvec tau_h_shared_receive, const arma::field<arma::cube> y_ijtk, const arma::field<arma::cube> w_ijtk, arma::field<arma::cube> gamma_ijtk) {
        typedef SEXP(*Ptr_sample_coord_ith_shared_link_dir_cpp)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_sample_coord_ith_shared_link_dir_cpp p_sample_coord_ith_shared_link_dir_cpp = NULL;
        if (p_sample_coord_ith_shared_link_dir_cpp == NULL) {
            validateSignature("Rcpp::List(*sample_coord_ith_shared_link_dir_cpp)(arma::cube,arma::cube,const arma::mat,const arma::colvec,const arma::colvec,const arma::field<arma::cube>,const arma::field<arma::cube>,arma::field<arma::cube>)");
            p_sample_coord_ith_shared_link_dir_cpp = (Ptr_sample_coord_ith_shared_link_dir_cpp)R_GetCCallable("DynMultiNet", "_DynMultiNet_sample_coord_ith_shared_link_dir_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_sample_coord_ith_shared_link_dir_cpp(Shield<SEXP>(Rcpp::wrap(ab_ith_shared_send)), Shield<SEXP>(Rcpp::wrap(ab_ith_shared_receive)), Shield<SEXP>(Rcpp::wrap(ab_t_sigma_prior_inv)), Shield<SEXP>(Rcpp::wrap(tau_h_shared_send)), Shield<SEXP>(Rcpp::wrap(tau_h_shared_receive)), Shield<SEXP>(Rcpp::wrap(y_ijtk)), Shield<SEXP>(Rcpp::wrap(w_ijtk)), Shield<SEXP>(Rcpp::wrap(gamma_ijtk)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline arma::colvec sample_beta_z_layer_DynMultiNet_bin_cpp(arma::colvec beta_t, arma::colvec z_t, const arma::mat beta_t_cov_prior_inv, const arma::cube y_ijt, const arma::cube w_ijt, const arma::cube gamma_ijt, const bool directed = false) {
        typedef SEXP(*Ptr_sample_beta_z_layer_DynMultiNet_bin_cpp)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_sample_beta_z_layer_DynMultiNet_bin_cpp p_sample_beta_z_layer_DynMultiNet_bin_cpp = NULL;
        if (p_sample_beta_z_layer_DynMultiNet_bin_cpp == NULL) {
            validateSignature("arma::colvec(*sample_beta_z_layer_DynMultiNet_bin_cpp)(arma::colvec,arma::colvec,const arma::mat,const arma::cube,const arma::cube,const arma::cube,const bool)");
            p_sample_beta_z_layer_DynMultiNet_bin_cpp = (Ptr_sample_beta_z_layer_DynMultiNet_bin_cpp)R_GetCCallable("DynMultiNet", "_DynMultiNet_sample_beta_z_layer_DynMultiNet_bin_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_sample_beta_z_layer_DynMultiNet_bin_cpp(Shield<SEXP>(Rcpp::wrap(beta_t)), Shield<SEXP>(Rcpp::wrap(z_t)), Shield<SEXP>(Rcpp::wrap(beta_t_cov_prior_inv)), Shield<SEXP>(Rcpp::wrap(y_ijt)), Shield<SEXP>(Rcpp::wrap(w_ijt)), Shield<SEXP>(Rcpp::wrap(gamma_ijt)), Shield<SEXP>(Rcpp::wrap(directed)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::colvec >(rcpp_result_gen);
    }

    inline Rcpp::List sample_baseline_tk_weight_cpp(arma::colvec theta_t, const arma::mat theta_t_cov_prior_inv, const arma::cube y_ijt, arma::cube mu_ijt, const double sigma_k, const bool directed = false) {
        typedef SEXP(*Ptr_sample_baseline_tk_weight_cpp)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_sample_baseline_tk_weight_cpp p_sample_baseline_tk_weight_cpp = NULL;
        if (p_sample_baseline_tk_weight_cpp == NULL) {
            validateSignature("Rcpp::List(*sample_baseline_tk_weight_cpp)(arma::colvec,const arma::mat,const arma::cube,arma::cube,const double,const bool)");
            p_sample_baseline_tk_weight_cpp = (Ptr_sample_baseline_tk_weight_cpp)R_GetCCallable("DynMultiNet", "_DynMultiNet_sample_baseline_tk_weight_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_sample_baseline_tk_weight_cpp(Shield<SEXP>(Rcpp::wrap(theta_t)), Shield<SEXP>(Rcpp::wrap(theta_t_cov_prior_inv)), Shield<SEXP>(Rcpp::wrap(y_ijt)), Shield<SEXP>(Rcpp::wrap(mu_ijt)), Shield<SEXP>(Rcpp::wrap(sigma_k)), Shield<SEXP>(Rcpp::wrap(directed)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List sample_coord_ith_weight_cpp(arma::cube uv_ith, const arma::mat uv_t_sigma_prior_inv, const arma::colvec tau_h, const arma::cube y_ijt, arma::cube mu_ijt, const double sigma_k) {
        typedef SEXP(*Ptr_sample_coord_ith_weight_cpp)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_sample_coord_ith_weight_cpp p_sample_coord_ith_weight_cpp = NULL;
        if (p_sample_coord_ith_weight_cpp == NULL) {
            validateSignature("Rcpp::List(*sample_coord_ith_weight_cpp)(arma::cube,const arma::mat,const arma::colvec,const arma::cube,arma::cube,const double)");
            p_sample_coord_ith_weight_cpp = (Ptr_sample_coord_ith_weight_cpp)R_GetCCallable("DynMultiNet", "_DynMultiNet_sample_coord_ith_weight_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_sample_coord_ith_weight_cpp(Shield<SEXP>(Rcpp::wrap(uv_ith)), Shield<SEXP>(Rcpp::wrap(uv_t_sigma_prior_inv)), Shield<SEXP>(Rcpp::wrap(tau_h)), Shield<SEXP>(Rcpp::wrap(y_ijt)), Shield<SEXP>(Rcpp::wrap(mu_ijt)), Shield<SEXP>(Rcpp::wrap(sigma_k)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List sample_coord_ith_shared_weight_cpp(arma::cube uv_ith_shared, const arma::mat uv_t_sigma_prior_inv, const arma::colvec tau_h, const arma::field<arma::cube> y_ijtk, arma::field<arma::cube> mu_ijtk, const arma::colvec sigma_k) {
        typedef SEXP(*Ptr_sample_coord_ith_shared_weight_cpp)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_sample_coord_ith_shared_weight_cpp p_sample_coord_ith_shared_weight_cpp = NULL;
        if (p_sample_coord_ith_shared_weight_cpp == NULL) {
            validateSignature("Rcpp::List(*sample_coord_ith_shared_weight_cpp)(arma::cube,const arma::mat,const arma::colvec,const arma::field<arma::cube>,arma::field<arma::cube>,const arma::colvec)");
            p_sample_coord_ith_shared_weight_cpp = (Ptr_sample_coord_ith_shared_weight_cpp)R_GetCCallable("DynMultiNet", "_DynMultiNet_sample_coord_ith_shared_weight_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_sample_coord_ith_shared_weight_cpp(Shield<SEXP>(Rcpp::wrap(uv_ith_shared)), Shield<SEXP>(Rcpp::wrap(uv_t_sigma_prior_inv)), Shield<SEXP>(Rcpp::wrap(tau_h)), Shield<SEXP>(Rcpp::wrap(y_ijtk)), Shield<SEXP>(Rcpp::wrap(mu_ijtk)), Shield<SEXP>(Rcpp::wrap(sigma_k)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List sample_coord_ith_weight_dir_cpp(arma::cube u_ith, arma::cube v_ith, const arma::mat uv_t_sigma_prior_inv, const arma::colvec tau_h_send, const arma::colvec tau_h_receive, const arma::cube y_ijt, arma::cube mu_ijt, const double sigma_k) {
        typedef SEXP(*Ptr_sample_coord_ith_weight_dir_cpp)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_sample_coord_ith_weight_dir_cpp p_sample_coord_ith_weight_dir_cpp = NULL;
        if (p_sample_coord_ith_weight_dir_cpp == NULL) {
            validateSignature("Rcpp::List(*sample_coord_ith_weight_dir_cpp)(arma::cube,arma::cube,const arma::mat,const arma::colvec,const arma::colvec,const arma::cube,arma::cube,const double)");
            p_sample_coord_ith_weight_dir_cpp = (Ptr_sample_coord_ith_weight_dir_cpp)R_GetCCallable("DynMultiNet", "_DynMultiNet_sample_coord_ith_weight_dir_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_sample_coord_ith_weight_dir_cpp(Shield<SEXP>(Rcpp::wrap(u_ith)), Shield<SEXP>(Rcpp::wrap(v_ith)), Shield<SEXP>(Rcpp::wrap(uv_t_sigma_prior_inv)), Shield<SEXP>(Rcpp::wrap(tau_h_send)), Shield<SEXP>(Rcpp::wrap(tau_h_receive)), Shield<SEXP>(Rcpp::wrap(y_ijt)), Shield<SEXP>(Rcpp::wrap(mu_ijt)), Shield<SEXP>(Rcpp::wrap(sigma_k)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List sample_coord_ith_shared_weight_dir_cpp(arma::cube u_ith_shared, arma::cube v_ith_shared, const arma::mat uv_t_sigma_prior_inv, const arma::colvec tau_h_shared_send, const arma::colvec tau_h_shared_receive, const arma::field<arma::cube> y_ijtk, arma::field<arma::cube> mu_ijtk, const arma::colvec sigma_k) {
        typedef SEXP(*Ptr_sample_coord_ith_shared_weight_dir_cpp)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_sample_coord_ith_shared_weight_dir_cpp p_sample_coord_ith_shared_weight_dir_cpp = NULL;
        if (p_sample_coord_ith_shared_weight_dir_cpp == NULL) {
            validateSignature("Rcpp::List(*sample_coord_ith_shared_weight_dir_cpp)(arma::cube,arma::cube,const arma::mat,const arma::colvec,const arma::colvec,const arma::field<arma::cube>,arma::field<arma::cube>,const arma::colvec)");
            p_sample_coord_ith_shared_weight_dir_cpp = (Ptr_sample_coord_ith_shared_weight_dir_cpp)R_GetCCallable("DynMultiNet", "_DynMultiNet_sample_coord_ith_shared_weight_dir_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_sample_coord_ith_shared_weight_dir_cpp(Shield<SEXP>(Rcpp::wrap(u_ith_shared)), Shield<SEXP>(Rcpp::wrap(v_ith_shared)), Shield<SEXP>(Rcpp::wrap(uv_t_sigma_prior_inv)), Shield<SEXP>(Rcpp::wrap(tau_h_shared_send)), Shield<SEXP>(Rcpp::wrap(tau_h_shared_receive)), Shield<SEXP>(Rcpp::wrap(y_ijtk)), Shield<SEXP>(Rcpp::wrap(mu_ijtk)), Shield<SEXP>(Rcpp::wrap(sigma_k)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline double sample_var_weight_cpp(double sigma_k, double sigma_k_prop_int, const arma::cube y_ijt, const arma::cube mu_ijt, const bool directed = false) {
        typedef SEXP(*Ptr_sample_var_weight_cpp)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_sample_var_weight_cpp p_sample_var_weight_cpp = NULL;
        if (p_sample_var_weight_cpp == NULL) {
            validateSignature("double(*sample_var_weight_cpp)(double,double,const arma::cube,const arma::cube,const bool)");
            p_sample_var_weight_cpp = (Ptr_sample_var_weight_cpp)R_GetCCallable("DynMultiNet", "_DynMultiNet_sample_var_weight_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_sample_var_weight_cpp(Shield<SEXP>(Rcpp::wrap(sigma_k)), Shield<SEXP>(Rcpp::wrap(sigma_k_prop_int)), Shield<SEXP>(Rcpp::wrap(y_ijt)), Shield<SEXP>(Rcpp::wrap(mu_ijt)), Shield<SEXP>(Rcpp::wrap(directed)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

}

#endif // RCPP_DynMultiNet_RCPPEXPORTS_H_GEN_
