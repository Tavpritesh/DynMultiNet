/*
    DynMultiNet is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    DynMultiNet is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with DynMultiNet.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.17.0

#include <stan/model/model_header.hpp>

namespace model_net_d_0_w_0_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_net_d_0_w_0");
    reader.add_event(103, 103, "end", "model_net_d_0_w_0");
    return reader;
}

#include <meta_header.hpp>
 class model_net_d_0_w_0 : public prob_grad {
private:
    int V_net;
    int T_net;
    int K_net;
    int H_dim;
    int R_dim;
    vector<vector<vector<vector<int> > > > y_ijtk;
    vector_d mu_t_mean_prior;
    matrix_d mu_t_cov_prior;
    vector_d x_t_mean_prior;
    matrix_d x_t_cov_prior;
    double a_1;
    double a_2;
public:
    model_net_d_0_w_0(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_net_d_0_w_0(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_net_d_0_w_0_namespace::model_net_d_0_w_0";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 5;
            context__.validate_dims("data initialization", "V_net", "int", context__.to_vec());
            V_net = int(0);
            vals_i__ = context__.vals_i("V_net");
            pos__ = 0;
            V_net = vals_i__[pos__++];
            current_statement_begin__ = 6;
            context__.validate_dims("data initialization", "T_net", "int", context__.to_vec());
            T_net = int(0);
            vals_i__ = context__.vals_i("T_net");
            pos__ = 0;
            T_net = vals_i__[pos__++];
            current_statement_begin__ = 7;
            context__.validate_dims("data initialization", "K_net", "int", context__.to_vec());
            K_net = int(0);
            vals_i__ = context__.vals_i("K_net");
            pos__ = 0;
            K_net = vals_i__[pos__++];
            current_statement_begin__ = 8;
            context__.validate_dims("data initialization", "H_dim", "int", context__.to_vec());
            H_dim = int(0);
            vals_i__ = context__.vals_i("H_dim");
            pos__ = 0;
            H_dim = vals_i__[pos__++];
            current_statement_begin__ = 9;
            context__.validate_dims("data initialization", "R_dim", "int", context__.to_vec());
            R_dim = int(0);
            vals_i__ = context__.vals_i("R_dim");
            pos__ = 0;
            R_dim = vals_i__[pos__++];
            current_statement_begin__ = 11;
            validate_non_negative_index("y_ijtk", "V_net", V_net);
            validate_non_negative_index("y_ijtk", "V_net", V_net);
            validate_non_negative_index("y_ijtk", "T_net", T_net);
            validate_non_negative_index("y_ijtk", "K_net", K_net);
            context__.validate_dims("data initialization", "y_ijtk", "int", context__.to_vec(V_net,V_net,T_net,K_net));
            validate_non_negative_index("y_ijtk", "V_net", V_net);
            validate_non_negative_index("y_ijtk", "V_net", V_net);
            validate_non_negative_index("y_ijtk", "T_net", T_net);
            validate_non_negative_index("y_ijtk", "K_net", K_net);
            y_ijtk = std::vector<std::vector<std::vector<std::vector<int> > > >(V_net,std::vector<std::vector<std::vector<int> > >(V_net,std::vector<std::vector<int> >(T_net,std::vector<int>(K_net,int(0)))));
            vals_i__ = context__.vals_i("y_ijtk");
            pos__ = 0;
            size_t y_ijtk_limit_3__ = K_net;
            for (size_t i_3__ = 0; i_3__ < y_ijtk_limit_3__; ++i_3__) {
                size_t y_ijtk_limit_2__ = T_net;
                for (size_t i_2__ = 0; i_2__ < y_ijtk_limit_2__; ++i_2__) {
                    size_t y_ijtk_limit_1__ = V_net;
                    for (size_t i_1__ = 0; i_1__ < y_ijtk_limit_1__; ++i_1__) {
                        size_t y_ijtk_limit_0__ = V_net;
                        for (size_t i_0__ = 0; i_0__ < y_ijtk_limit_0__; ++i_0__) {
                            y_ijtk[i_0__][i_1__][i_2__][i_3__] = vals_i__[pos__++];
                        }
                    }
                }
            }
            current_statement_begin__ = 13;
            validate_non_negative_index("mu_t_mean_prior", "T_net", T_net);
            context__.validate_dims("data initialization", "mu_t_mean_prior", "vector_d", context__.to_vec(T_net));
            validate_non_negative_index("mu_t_mean_prior", "T_net", T_net);
            mu_t_mean_prior = vector_d(static_cast<Eigen::VectorXd::Index>(T_net));
            vals_r__ = context__.vals_r("mu_t_mean_prior");
            pos__ = 0;
            size_t mu_t_mean_prior_i_vec_lim__ = T_net;
            for (size_t i_vec__ = 0; i_vec__ < mu_t_mean_prior_i_vec_lim__; ++i_vec__) {
                mu_t_mean_prior[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 14;
            validate_non_negative_index("mu_t_cov_prior", "T_net", T_net);
            validate_non_negative_index("mu_t_cov_prior", "T_net", T_net);
            context__.validate_dims("data initialization", "mu_t_cov_prior", "matrix_d", context__.to_vec(T_net,T_net));
            validate_non_negative_index("mu_t_cov_prior", "T_net", T_net);
            validate_non_negative_index("mu_t_cov_prior", "T_net", T_net);
            mu_t_cov_prior = matrix_d(static_cast<Eigen::VectorXd::Index>(T_net),static_cast<Eigen::VectorXd::Index>(T_net));
            vals_r__ = context__.vals_r("mu_t_cov_prior");
            pos__ = 0;
            size_t mu_t_cov_prior_k_mat_lim__ = T_net;
            for (size_t n_mat__ = 0; n_mat__ < mu_t_cov_prior_k_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < mu_t_cov_prior_k_mat_lim__; ++m_mat__) {
                    mu_t_cov_prior(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 16;
            validate_non_negative_index("x_t_mean_prior", "T_net", T_net);
            context__.validate_dims("data initialization", "x_t_mean_prior", "vector_d", context__.to_vec(T_net));
            validate_non_negative_index("x_t_mean_prior", "T_net", T_net);
            x_t_mean_prior = vector_d(static_cast<Eigen::VectorXd::Index>(T_net));
            vals_r__ = context__.vals_r("x_t_mean_prior");
            pos__ = 0;
            size_t x_t_mean_prior_i_vec_lim__ = T_net;
            for (size_t i_vec__ = 0; i_vec__ < x_t_mean_prior_i_vec_lim__; ++i_vec__) {
                x_t_mean_prior[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 17;
            validate_non_negative_index("x_t_cov_prior", "T_net", T_net);
            validate_non_negative_index("x_t_cov_prior", "T_net", T_net);
            context__.validate_dims("data initialization", "x_t_cov_prior", "matrix_d", context__.to_vec(T_net,T_net));
            validate_non_negative_index("x_t_cov_prior", "T_net", T_net);
            validate_non_negative_index("x_t_cov_prior", "T_net", T_net);
            x_t_cov_prior = matrix_d(static_cast<Eigen::VectorXd::Index>(T_net),static_cast<Eigen::VectorXd::Index>(T_net));
            vals_r__ = context__.vals_r("x_t_cov_prior");
            pos__ = 0;
            size_t x_t_cov_prior_k_mat_lim__ = T_net;
            for (size_t n_mat__ = 0; n_mat__ < x_t_cov_prior_k_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < x_t_cov_prior_k_mat_lim__; ++m_mat__) {
                    x_t_cov_prior(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 19;
            context__.validate_dims("data initialization", "a_1", "double", context__.to_vec());
            a_1 = double(0);
            vals_r__ = context__.vals_r("a_1");
            pos__ = 0;
            a_1 = vals_r__[pos__++];
            current_statement_begin__ = 20;
            context__.validate_dims("data initialization", "a_2", "double", context__.to_vec());
            a_2 = double(0);
            vals_r__ = context__.vals_r("a_2");
            pos__ = 0;
            a_2 = vals_r__[pos__++];

            // validate, data variables
            current_statement_begin__ = 5;
            check_greater_or_equal(function__,"V_net",V_net,0);
            current_statement_begin__ = 6;
            check_greater_or_equal(function__,"T_net",T_net,0);
            current_statement_begin__ = 7;
            check_greater_or_equal(function__,"K_net",K_net,0);
            current_statement_begin__ = 8;
            check_greater_or_equal(function__,"H_dim",H_dim,0);
            current_statement_begin__ = 9;
            check_greater_or_equal(function__,"R_dim",R_dim,0);
            current_statement_begin__ = 11;
            for (int k0__ = 0; k0__ < V_net; ++k0__) {
                for (int k1__ = 0; k1__ < V_net; ++k1__) {
                    for (int k2__ = 0; k2__ < T_net; ++k2__) {
                        for (int k3__ = 0; k3__ < K_net; ++k3__) {
                            check_greater_or_equal(function__,"y_ijtk[k0__][k1__][k2__][k3__]",y_ijtk[k0__][k1__][k2__][k3__],0);
                        }
                    }
                }
            }
            current_statement_begin__ = 13;
            current_statement_begin__ = 14;
            stan::math::check_corr_matrix(function__,"mu_t_cov_prior",mu_t_cov_prior);
            current_statement_begin__ = 16;
            current_statement_begin__ = 17;
            stan::math::check_corr_matrix(function__,"x_t_cov_prior",x_t_cov_prior);
            current_statement_begin__ = 19;
            check_greater_or_equal(function__,"a_1",a_1,0);
            current_statement_begin__ = 20;
            check_greater_or_equal(function__,"a_2",a_2,0);
            // initialize data variables


            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 24;
            validate_non_negative_index("x_t_ih_shared", "T_net", T_net);
            validate_non_negative_index("x_t_ih_shared", "V_net", V_net);
            validate_non_negative_index("x_t_ih_shared", "H_dim", H_dim);
            num_params_r__ += T_net * V_net * H_dim;
            current_statement_begin__ = 25;
            validate_non_negative_index("x_t_ihk", "T_net", T_net);
            validate_non_negative_index("x_t_ihk", "V_net", V_net);
            validate_non_negative_index("x_t_ihk", "R_dim", R_dim);
            validate_non_negative_index("x_t_ihk", "K_net", K_net);
            num_params_r__ += T_net * V_net * R_dim * K_net;
            current_statement_begin__ = 26;
            validate_non_negative_index("mu_kt", "T_net", T_net);
            validate_non_negative_index("mu_kt", "K_net", K_net);
            num_params_r__ += T_net * K_net;
            current_statement_begin__ = 27;
            validate_non_negative_index("nu_h_shared", "H_dim", H_dim);
            num_params_r__ += H_dim;
            current_statement_begin__ = 28;
        validate_non_negative_index("nu_hk", "H_dim", H_dim);
            validate_non_negative_index("nu_hk", "K_net", K_net);
            num_params_r__ += H_dim * K_net;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_net_d_0_w_0() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("x_t_ih_shared")))
            throw std::runtime_error("variable x_t_ih_shared missing");
        vals_r__ = context__.vals_r("x_t_ih_shared");
        pos__ = 0U;
        validate_non_negative_index("x_t_ih_shared", "V_net", V_net);
        validate_non_negative_index("x_t_ih_shared", "H_dim", H_dim);
        validate_non_negative_index("x_t_ih_shared", "T_net", T_net);
        context__.validate_dims("initialization", "x_t_ih_shared", "vector_d", context__.to_vec(V_net,H_dim,T_net));
        std::vector<std::vector<vector_d> > x_t_ih_shared(V_net,std::vector<vector_d>(H_dim,vector_d(static_cast<Eigen::VectorXd::Index>(T_net))));
        for (int j1__ = 0U; j1__ < T_net; ++j1__)
            for (int i1__ = 0U; i1__ < H_dim; ++i1__)
                for (int i0__ = 0U; i0__ < V_net; ++i0__)
                    x_t_ih_shared[i0__][i1__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < V_net; ++i0__)
            for (int i1__ = 0U; i1__ < H_dim; ++i1__)
                try {
            writer__.vector_unconstrain(x_t_ih_shared[i0__][i1__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable x_t_ih_shared: ") + e.what());
        }

        if (!(context__.contains_r("x_t_ihk")))
            throw std::runtime_error("variable x_t_ihk missing");
        vals_r__ = context__.vals_r("x_t_ihk");
        pos__ = 0U;
        validate_non_negative_index("x_t_ihk", "V_net", V_net);
        validate_non_negative_index("x_t_ihk", "R_dim", R_dim);
        validate_non_negative_index("x_t_ihk", "K_net", K_net);
        validate_non_negative_index("x_t_ihk", "T_net", T_net);
        context__.validate_dims("initialization", "x_t_ihk", "vector_d", context__.to_vec(V_net,R_dim,K_net,T_net));
        std::vector<std::vector<std::vector<vector_d> > > x_t_ihk(V_net,std::vector<std::vector<vector_d> >(R_dim,std::vector<vector_d>(K_net,vector_d(static_cast<Eigen::VectorXd::Index>(T_net)))));
        for (int j1__ = 0U; j1__ < T_net; ++j1__)
            for (int i2__ = 0U; i2__ < K_net; ++i2__)
                for (int i1__ = 0U; i1__ < R_dim; ++i1__)
                    for (int i0__ = 0U; i0__ < V_net; ++i0__)
                        x_t_ihk[i0__][i1__][i2__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < V_net; ++i0__)
            for (int i1__ = 0U; i1__ < R_dim; ++i1__)
                for (int i2__ = 0U; i2__ < K_net; ++i2__)
                    try {
            writer__.vector_unconstrain(x_t_ihk[i0__][i1__][i2__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable x_t_ihk: ") + e.what());
        }

        if (!(context__.contains_r("mu_kt")))
            throw std::runtime_error("variable mu_kt missing");
        vals_r__ = context__.vals_r("mu_kt");
        pos__ = 0U;
        validate_non_negative_index("mu_kt", "K_net", K_net);
        validate_non_negative_index("mu_kt", "T_net", T_net);
        context__.validate_dims("initialization", "mu_kt", "vector_d", context__.to_vec(K_net,T_net));
        std::vector<vector_d> mu_kt(K_net,vector_d(static_cast<Eigen::VectorXd::Index>(T_net)));
        for (int j1__ = 0U; j1__ < T_net; ++j1__)
            for (int i0__ = 0U; i0__ < K_net; ++i0__)
                mu_kt[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < K_net; ++i0__)
            try {
            writer__.vector_unconstrain(mu_kt[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable mu_kt: ") + e.what());
        }

        if (!(context__.contains_r("nu_h_shared")))
            throw std::runtime_error("variable nu_h_shared missing");
        vals_r__ = context__.vals_r("nu_h_shared");
        pos__ = 0U;
        validate_non_negative_index("nu_h_shared", "H_dim", H_dim);
        context__.validate_dims("initialization", "nu_h_shared", "vector_d", context__.to_vec(H_dim));
        vector_d nu_h_shared(static_cast<Eigen::VectorXd::Index>(H_dim));
        for (int j1__ = 0U; j1__ < H_dim; ++j1__)
            nu_h_shared(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,nu_h_shared);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable nu_h_shared: ") + e.what());
        }

        if (!(context__.contains_r("nu_hk")))
            throw std::runtime_error("variable nu_hk missing");
        vals_r__ = context__.vals_r("nu_hk");
        pos__ = 0U;
        validate_non_negative_index("nu_hk", "H_dim", H_dim);
        validate_non_negative_index("nu_hk", "K_net", K_net);
        context__.validate_dims("initialization", "nu_hk", "matrix_d", context__.to_vec(H_dim,K_net));
        matrix_d nu_hk(static_cast<Eigen::VectorXd::Index>(H_dim),static_cast<Eigen::VectorXd::Index>(K_net));
        for (int j2__ = 0U; j2__ < K_net; ++j2__)
            for (int j1__ = 0U; j1__ < H_dim; ++j1__)
                nu_hk(j1__,j2__) = vals_r__[pos__++];
        try {
            writer__.matrix_lb_unconstrain(0,nu_hk);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable nu_hk: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<T__> in__(params_r__,params_i__);

            vector<vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > > x_t_ih_shared;
            size_t dim_x_t_ih_shared_0__ = V_net;
            x_t_ih_shared.resize(dim_x_t_ih_shared_0__);
            for (size_t k_0__ = 0; k_0__ < dim_x_t_ih_shared_0__; ++k_0__) {
                size_t dim_x_t_ih_shared_1__ = H_dim;
                x_t_ih_shared[k_0__].reserve(dim_x_t_ih_shared_1__);
                for (size_t k_1__ = 0; k_1__ < dim_x_t_ih_shared_1__; ++k_1__) {
                    if (jacobian__)
                        x_t_ih_shared[k_0__].push_back(in__.vector_constrain(T_net,lp__));
                    else
                        x_t_ih_shared[k_0__].push_back(in__.vector_constrain(T_net));
                }
            }

            vector<vector<vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > > > x_t_ihk;
            size_t dim_x_t_ihk_0__ = V_net;
            x_t_ihk.resize(dim_x_t_ihk_0__);
            for (size_t k_0__ = 0; k_0__ < dim_x_t_ihk_0__; ++k_0__) {
                size_t dim_x_t_ihk_1__ = R_dim;
                x_t_ihk[k_0__].resize(dim_x_t_ihk_1__);
                for (size_t k_1__ = 0; k_1__ < dim_x_t_ihk_1__; ++k_1__) {
                    size_t dim_x_t_ihk_2__ = K_net;
                    x_t_ihk[k_0__][k_1__].reserve(dim_x_t_ihk_2__);
                    for (size_t k_2__ = 0; k_2__ < dim_x_t_ihk_2__; ++k_2__) {
                        if (jacobian__)
                            x_t_ihk[k_0__][k_1__].push_back(in__.vector_constrain(T_net,lp__));
                        else
                            x_t_ihk[k_0__][k_1__].push_back(in__.vector_constrain(T_net));
                    }
                }
            }

            vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > mu_kt;
            size_t dim_mu_kt_0__ = K_net;
            mu_kt.reserve(dim_mu_kt_0__);
            for (size_t k_0__ = 0; k_0__ < dim_mu_kt_0__; ++k_0__) {
                if (jacobian__)
                    mu_kt.push_back(in__.vector_constrain(T_net,lp__));
                else
                    mu_kt.push_back(in__.vector_constrain(T_net));
            }

            Eigen::Matrix<T__,Eigen::Dynamic,1>  nu_h_shared;
            (void) nu_h_shared;  // dummy to suppress unused var warning
            if (jacobian__)
                nu_h_shared = in__.vector_lb_constrain(0,H_dim,lp__);
            else
                nu_h_shared = in__.vector_lb_constrain(0,H_dim);

            Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  nu_hk;
            (void) nu_hk;  // dummy to suppress unused var warning
            if (jacobian__)
                nu_hk = in__.matrix_lb_constrain(0,H_dim,K_net,lp__);
            else
                nu_hk = in__.matrix_lb_constrain(0,H_dim,K_net);


            // transformed parameters
            current_statement_begin__ = 33;
            validate_non_negative_index("x_h_it_shared", "H_dim", H_dim);
            validate_non_negative_index("x_h_it_shared", "V_net", V_net);
            validate_non_negative_index("x_h_it_shared", "T_net", T_net);
            vector<vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > > x_h_it_shared(V_net, (vector<Eigen::Matrix<T__,Eigen::Dynamic,1> >(T_net, (Eigen::Matrix<T__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(H_dim))))));
            stan::math::initialize(x_h_it_shared, DUMMY_VAR__);
            stan::math::fill(x_h_it_shared,DUMMY_VAR__);
            current_statement_begin__ = 34;
            validate_non_negative_index("x_h_itk", "H_dim", H_dim);
            validate_non_negative_index("x_h_itk", "V_net", V_net);
            validate_non_negative_index("x_h_itk", "T_net", T_net);
            validate_non_negative_index("x_h_itk", "K_net", K_net);
            vector<vector<vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > > > x_h_itk(V_net, (vector<vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > >(T_net, (vector<Eigen::Matrix<T__,Eigen::Dynamic,1> >(K_net, (Eigen::Matrix<T__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(H_dim))))))));
            stan::math::initialize(x_h_itk, DUMMY_VAR__);
            stan::math::fill(x_h_itk,DUMMY_VAR__);
            current_statement_begin__ = 35;
            validate_non_negative_index("s_ijtk", "V_net", V_net);
            validate_non_negative_index("s_ijtk", "V_net", V_net);
            validate_non_negative_index("s_ijtk", "T_net", T_net);
            validate_non_negative_index("s_ijtk", "K_net", K_net);
            vector<vector<vector<vector<T__> > > > s_ijtk(V_net, (vector<vector<vector<T__> > >(V_net, (vector<vector<T__> >(T_net, (vector<T__>(K_net)))))));
            stan::math::initialize(s_ijtk, DUMMY_VAR__);
            stan::math::fill(s_ijtk,DUMMY_VAR__);
            current_statement_begin__ = 36;
            validate_non_negative_index("tau_h_shared", "H_dim", H_dim);
            Eigen::Matrix<T__,Eigen::Dynamic,1>  tau_h_shared(static_cast<Eigen::VectorXd::Index>(H_dim));
            (void) tau_h_shared;  // dummy to suppress unused var warning

            stan::math::initialize(tau_h_shared, DUMMY_VAR__);
            stan::math::fill(tau_h_shared,DUMMY_VAR__);
            current_statement_begin__ = 37;
            validate_non_negative_index("tau_hk", "H_dim", H_dim);
            validate_non_negative_index("tau_hk", "K_net", K_net);
            Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  tau_hk(static_cast<Eigen::VectorXd::Index>(H_dim),static_cast<Eigen::VectorXd::Index>(K_net));
            (void) tau_hk;  // dummy to suppress unused var warning

            stan::math::initialize(tau_hk, DUMMY_VAR__);
            stan::math::fill(tau_hk,DUMMY_VAR__);


            current_statement_begin__ = 39;
            for (int t = 1; t <= T_net; ++t) {

                current_statement_begin__ = 40;
                for (int i = 1; i <= V_net; ++i) {

                    current_statement_begin__ = 41;
                    for (int h = 1; h <= H_dim; ++h) {

                        current_statement_begin__ = 42;
                        stan::math::assign(get_base1_lhs(get_base1_lhs(get_base1_lhs(x_h_it_shared,i,"x_h_it_shared",1),t,"x_h_it_shared",2),h,"x_h_it_shared",3), get_base1(get_base1(get_base1(x_t_ih_shared,i,"x_t_ih_shared",1),h,"x_t_ih_shared",2),t,"x_t_ih_shared",3));
                        current_statement_begin__ = 43;
                        for (int k = 1; k <= K_net; ++k) {

                            current_statement_begin__ = 44;
                            stan::math::assign(get_base1_lhs(get_base1_lhs(get_base1_lhs(get_base1_lhs(x_h_itk,i,"x_h_itk",1),t,"x_h_itk",2),k,"x_h_itk",3),h,"x_h_itk",4), get_base1(get_base1(get_base1(get_base1(x_t_ihk,i,"x_t_ihk",1),h,"x_t_ihk",2),k,"x_t_ihk",3),t,"x_t_ihk",4));
                        }
                    }
                }
            }
            current_statement_begin__ = 50;
            for (int k = 1; k <= K_net; ++k) {

                current_statement_begin__ = 51;
                for (int t = 1; t <= T_net; ++t) {

                    current_statement_begin__ = 52;
                    for (int i = 2; i <= V_net; ++i) {

                        current_statement_begin__ = 53;
                        for (int j = 1; j <= (i - 1); ++j) {

                            current_statement_begin__ = 54;
                            stan::math::assign(get_base1_lhs(get_base1_lhs(get_base1_lhs(get_base1_lhs(s_ijtk,i,"s_ijtk",1),j,"s_ijtk",2),t,"s_ijtk",3),k,"s_ijtk",4), ((get_base1(get_base1(mu_kt,k,"mu_kt",1),t,"mu_kt",2) + multiply(transpose(get_base1(get_base1(x_h_it_shared,i,"x_h_it_shared",1),t,"x_h_it_shared",2)),get_base1(get_base1(x_h_it_shared,j,"x_h_it_shared",1),t,"x_h_it_shared",2))) + multiply(transpose(get_base1(get_base1(get_base1(x_h_itk,i,"x_h_itk",1),t,"x_h_itk",2),k,"x_h_itk",3)),get_base1(get_base1(get_base1(x_h_itk,j,"x_h_itk",1),t,"x_h_itk",2),k,"x_h_itk",3))));
                        }
                    }
                }
            }
            current_statement_begin__ = 60;
            stan::math::assign(get_base1_lhs(tau_h_shared,1,"tau_h_shared",1), get_base1(nu_h_shared,1,"nu_h_shared",1));
            current_statement_begin__ = 61;
            stan::math::assign(get_base1_lhs(tau_hk,1,"tau_hk",1), get_base1(nu_hk,1,"nu_hk",1));
            current_statement_begin__ = 62;
            for (int h = 2; h <= H_dim; ++h) {

                current_statement_begin__ = 63;
                stan::math::assign(get_base1_lhs(tau_h_shared,h,"tau_h_shared",1), (get_base1(tau_h_shared,(h - 1),"tau_h_shared",1) * get_base1(nu_h_shared,h,"nu_h_shared",1)));
                current_statement_begin__ = 64;
                stan::math::assign(get_base1_lhs(tau_hk,h,"tau_hk",1), elt_multiply(get_base1(tau_hk,(h - 1),"tau_hk",1),get_base1(nu_hk,h,"nu_hk",1)));
            }

            // validate transformed parameters
            for (int i0__ = 0; i0__ < V_net; ++i0__) {
                for (int i1__ = 0; i1__ < T_net; ++i1__) {
                    for (int i2__ = 0; i2__ < H_dim; ++i2__) {
                        if (stan::math::is_uninitialized(x_h_it_shared[i0__][i1__](i2__))) {
                            std::stringstream msg__;
                            msg__ << "Undefined transformed parameter: x_h_it_shared" << '[' << i0__ << ']' << '[' << i1__ << ']' << '[' << i2__ << ']';
                            throw std::runtime_error(msg__.str());
                        }
                    }
                }
            }
            for (int i0__ = 0; i0__ < V_net; ++i0__) {
                for (int i1__ = 0; i1__ < T_net; ++i1__) {
                    for (int i2__ = 0; i2__ < K_net; ++i2__) {
                        for (int i3__ = 0; i3__ < H_dim; ++i3__) {
                            if (stan::math::is_uninitialized(x_h_itk[i0__][i1__][i2__](i3__))) {
                                std::stringstream msg__;
                                msg__ << "Undefined transformed parameter: x_h_itk" << '[' << i0__ << ']' << '[' << i1__ << ']' << '[' << i2__ << ']' << '[' << i3__ << ']';
                                throw std::runtime_error(msg__.str());
                            }
                        }
                    }
                }
            }
            for (int i0__ = 0; i0__ < V_net; ++i0__) {
                for (int i1__ = 0; i1__ < V_net; ++i1__) {
                    for (int i2__ = 0; i2__ < T_net; ++i2__) {
                        for (int i3__ = 0; i3__ < K_net; ++i3__) {
                            if (stan::math::is_uninitialized(s_ijtk[i0__][i1__][i2__][i3__])) {
                                std::stringstream msg__;
                                msg__ << "Undefined transformed parameter: s_ijtk" << '[' << i0__ << ']' << '[' << i1__ << ']' << '[' << i2__ << ']' << '[' << i3__ << ']';
                                throw std::runtime_error(msg__.str());
                            }
                        }
                    }
                }
            }
            for (int i0__ = 0; i0__ < H_dim; ++i0__) {
                if (stan::math::is_uninitialized(tau_h_shared(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: tau_h_shared" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < H_dim; ++i0__) {
                for (int i1__ = 0; i1__ < K_net; ++i1__) {
                    if (stan::math::is_uninitialized(tau_hk(i0__,i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: tau_hk" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 33;
            current_statement_begin__ = 34;
            current_statement_begin__ = 35;
            current_statement_begin__ = 36;
            current_statement_begin__ = 37;

            // model body

            current_statement_begin__ = 71;
            for (int k = 1; k <= K_net; ++k) {

                current_statement_begin__ = 72;
                for (int t = 1; t <= T_net; ++t) {

                    current_statement_begin__ = 73;
                    for (int i = 2; i <= V_net; ++i) {

                        current_statement_begin__ = 74;
                        for (int j = 1; j <= (i - 1); ++j) {

                            current_statement_begin__ = 75;
                            lp_accum__.add(bernoulli_logit_log<propto__>(get_base1(get_base1(get_base1(get_base1(y_ijtk,i,"y_ijtk",1),j,"y_ijtk",2),t,"y_ijtk",3),k,"y_ijtk",4), get_base1(get_base1(get_base1(get_base1(s_ijtk,i,"s_ijtk",1),j,"s_ijtk",2),t,"s_ijtk",3),k,"s_ijtk",4)));
                        }
                    }
                }
            }
            current_statement_begin__ = 82;
            for (int k = 1; k <= K_net; ++k) {

                current_statement_begin__ = 83;
                lp_accum__.add(multi_normal_log<propto__>(get_base1(mu_kt,k,"mu_kt",1), mu_t_mean_prior, mu_t_cov_prior));
            }
            current_statement_begin__ = 86;
            for (int i = 1; i <= V_net; ++i) {

                current_statement_begin__ = 87;
                for (int h = 1; h <= H_dim; ++h) {

                    current_statement_begin__ = 88;
                    lp_accum__.add(multi_normal_log<propto__>(get_base1(get_base1(x_t_ih_shared,i,"x_t_ih_shared",1),h,"x_t_ih_shared",2), x_t_mean_prior, multiply((1 / get_base1(tau_h_shared,h,"tau_h_shared",1)),x_t_cov_prior)));
                }
                current_statement_begin__ = 90;
                for (int k = 1; k <= K_net; ++k) {

                    current_statement_begin__ = 91;
                    for (int h = 1; h <= R_dim; ++h) {

                        current_statement_begin__ = 92;
                        lp_accum__.add(multi_normal_log<propto__>(get_base1(get_base1(get_base1(x_t_ihk,i,"x_t_ihk",1),h,"x_t_ihk",2),k,"x_t_ihk",3), x_t_mean_prior, multiply((1 / get_base1(tau_hk,h,k,"tau_hk",1)),x_t_cov_prior)));
                    }
                }
            }
            current_statement_begin__ = 97;
            lp_accum__.add(gamma_log<propto__>(get_base1(nu_h_shared,1,"nu_h_shared",1), a_1, 1));
            current_statement_begin__ = 98;
            lp_accum__.add(gamma_log<propto__>(get_base1(nu_hk,1,"nu_hk",1), a_1, 1));
            current_statement_begin__ = 99;
            for (int h = 2; h <= H_dim; ++h) {

                current_statement_begin__ = 100;
                lp_accum__.add(gamma_log<propto__>(get_base1(nu_h_shared,h,"nu_h_shared",1), a_2, 1));
                current_statement_begin__ = 101;
                lp_accum__.add(gamma_log<propto__>(get_base1(nu_hk,h,"nu_hk",1), a_2, 1));
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("x_t_ih_shared");
        names__.push_back("x_t_ihk");
        names__.push_back("mu_kt");
        names__.push_back("nu_h_shared");
        names__.push_back("nu_hk");
        names__.push_back("x_h_it_shared");
        names__.push_back("x_h_itk");
        names__.push_back("s_ijtk");
        names__.push_back("tau_h_shared");
        names__.push_back("tau_hk");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(V_net);
        dims__.push_back(H_dim);
        dims__.push_back(T_net);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(V_net);
        dims__.push_back(R_dim);
        dims__.push_back(K_net);
        dims__.push_back(T_net);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K_net);
        dims__.push_back(T_net);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(H_dim);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(H_dim);
        dims__.push_back(K_net);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(V_net);
        dims__.push_back(T_net);
        dims__.push_back(H_dim);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(V_net);
        dims__.push_back(T_net);
        dims__.push_back(K_net);
        dims__.push_back(H_dim);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(V_net);
        dims__.push_back(V_net);
        dims__.push_back(T_net);
        dims__.push_back(K_net);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(H_dim);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(H_dim);
        dims__.push_back(K_net);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_net_d_0_w_0_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        vector<vector<vector_d> > x_t_ih_shared;
        size_t dim_x_t_ih_shared_0__ = V_net;
        x_t_ih_shared.resize(dim_x_t_ih_shared_0__);
        for (size_t k_0__ = 0; k_0__ < dim_x_t_ih_shared_0__; ++k_0__) {
            size_t dim_x_t_ih_shared_1__ = H_dim;
            for (size_t k_1__ = 0; k_1__ < dim_x_t_ih_shared_1__; ++k_1__) {
                x_t_ih_shared[k_0__].push_back(in__.vector_constrain(T_net));
            }
        }
        vector<vector<vector<vector_d> > > x_t_ihk;
        size_t dim_x_t_ihk_0__ = V_net;
        x_t_ihk.resize(dim_x_t_ihk_0__);
        for (size_t k_0__ = 0; k_0__ < dim_x_t_ihk_0__; ++k_0__) {
            size_t dim_x_t_ihk_1__ = R_dim;
            x_t_ihk[k_0__].resize(dim_x_t_ihk_1__);
            for (size_t k_1__ = 0; k_1__ < dim_x_t_ihk_1__; ++k_1__) {
                size_t dim_x_t_ihk_2__ = K_net;
                for (size_t k_2__ = 0; k_2__ < dim_x_t_ihk_2__; ++k_2__) {
                    x_t_ihk[k_0__][k_1__].push_back(in__.vector_constrain(T_net));
                }
            }
        }
        vector<vector_d> mu_kt;
        size_t dim_mu_kt_0__ = K_net;
        for (size_t k_0__ = 0; k_0__ < dim_mu_kt_0__; ++k_0__) {
            mu_kt.push_back(in__.vector_constrain(T_net));
        }
        vector_d nu_h_shared = in__.vector_lb_constrain(0,H_dim);
        matrix_d nu_hk = in__.matrix_lb_constrain(0,H_dim,K_net);
            for (int k_2__ = 0; k_2__ < T_net; ++k_2__) {
                for (int k_1__ = 0; k_1__ < H_dim; ++k_1__) {
                    for (int k_0__ = 0; k_0__ < V_net; ++k_0__) {
                    vars__.push_back(x_t_ih_shared[k_0__][k_1__][k_2__]);
                    }
                }
            }
            for (int k_3__ = 0; k_3__ < T_net; ++k_3__) {
                for (int k_2__ = 0; k_2__ < K_net; ++k_2__) {
                    for (int k_1__ = 0; k_1__ < R_dim; ++k_1__) {
                        for (int k_0__ = 0; k_0__ < V_net; ++k_0__) {
                        vars__.push_back(x_t_ihk[k_0__][k_1__][k_2__][k_3__]);
                        }
                    }
                }
            }
            for (int k_1__ = 0; k_1__ < T_net; ++k_1__) {
                for (int k_0__ = 0; k_0__ < K_net; ++k_0__) {
                vars__.push_back(mu_kt[k_0__][k_1__]);
                }
            }
            for (int k_0__ = 0; k_0__ < H_dim; ++k_0__) {
            vars__.push_back(nu_h_shared[k_0__]);
            }
            for (int k_1__ = 0; k_1__ < K_net; ++k_1__) {
                for (int k_0__ = 0; k_0__ < H_dim; ++k_0__) {
                vars__.push_back(nu_hk(k_0__, k_1__));
                }
            }

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            current_statement_begin__ = 33;
            validate_non_negative_index("x_h_it_shared", "H_dim", H_dim);
            validate_non_negative_index("x_h_it_shared", "V_net", V_net);
            validate_non_negative_index("x_h_it_shared", "T_net", T_net);
            vector<vector<vector_d> > x_h_it_shared(V_net, (vector<vector_d>(T_net, (vector_d(static_cast<Eigen::VectorXd::Index>(H_dim))))));
            stan::math::initialize(x_h_it_shared, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(x_h_it_shared,DUMMY_VAR__);
            current_statement_begin__ = 34;
            validate_non_negative_index("x_h_itk", "H_dim", H_dim);
            validate_non_negative_index("x_h_itk", "V_net", V_net);
            validate_non_negative_index("x_h_itk", "T_net", T_net);
            validate_non_negative_index("x_h_itk", "K_net", K_net);
            vector<vector<vector<vector_d> > > x_h_itk(V_net, (vector<vector<vector_d> >(T_net, (vector<vector_d>(K_net, (vector_d(static_cast<Eigen::VectorXd::Index>(H_dim))))))));
            stan::math::initialize(x_h_itk, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(x_h_itk,DUMMY_VAR__);
            current_statement_begin__ = 35;
            validate_non_negative_index("s_ijtk", "V_net", V_net);
            validate_non_negative_index("s_ijtk", "V_net", V_net);
            validate_non_negative_index("s_ijtk", "T_net", T_net);
            validate_non_negative_index("s_ijtk", "K_net", K_net);
            vector<vector<vector<vector<double> > > > s_ijtk(V_net, (vector<vector<vector<double> > >(V_net, (vector<vector<double> >(T_net, (vector<double>(K_net, 0.0)))))));
            stan::math::initialize(s_ijtk, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(s_ijtk,DUMMY_VAR__);
            current_statement_begin__ = 36;
            validate_non_negative_index("tau_h_shared", "H_dim", H_dim);
            vector_d tau_h_shared(static_cast<Eigen::VectorXd::Index>(H_dim));
            (void) tau_h_shared;  // dummy to suppress unused var warning

            stan::math::initialize(tau_h_shared, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(tau_h_shared,DUMMY_VAR__);
            current_statement_begin__ = 37;
            validate_non_negative_index("tau_hk", "H_dim", H_dim);
            validate_non_negative_index("tau_hk", "K_net", K_net);
            matrix_d tau_hk(static_cast<Eigen::VectorXd::Index>(H_dim),static_cast<Eigen::VectorXd::Index>(K_net));
            (void) tau_hk;  // dummy to suppress unused var warning

            stan::math::initialize(tau_hk, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(tau_hk,DUMMY_VAR__);


            current_statement_begin__ = 39;
            for (int t = 1; t <= T_net; ++t) {

                current_statement_begin__ = 40;
                for (int i = 1; i <= V_net; ++i) {

                    current_statement_begin__ = 41;
                    for (int h = 1; h <= H_dim; ++h) {

                        current_statement_begin__ = 42;
                        stan::math::assign(get_base1_lhs(get_base1_lhs(get_base1_lhs(x_h_it_shared,i,"x_h_it_shared",1),t,"x_h_it_shared",2),h,"x_h_it_shared",3), get_base1(get_base1(get_base1(x_t_ih_shared,i,"x_t_ih_shared",1),h,"x_t_ih_shared",2),t,"x_t_ih_shared",3));
                        current_statement_begin__ = 43;
                        for (int k = 1; k <= K_net; ++k) {

                            current_statement_begin__ = 44;
                            stan::math::assign(get_base1_lhs(get_base1_lhs(get_base1_lhs(get_base1_lhs(x_h_itk,i,"x_h_itk",1),t,"x_h_itk",2),k,"x_h_itk",3),h,"x_h_itk",4), get_base1(get_base1(get_base1(get_base1(x_t_ihk,i,"x_t_ihk",1),h,"x_t_ihk",2),k,"x_t_ihk",3),t,"x_t_ihk",4));
                        }
                    }
                }
            }
            current_statement_begin__ = 50;
            for (int k = 1; k <= K_net; ++k) {

                current_statement_begin__ = 51;
                for (int t = 1; t <= T_net; ++t) {

                    current_statement_begin__ = 52;
                    for (int i = 2; i <= V_net; ++i) {

                        current_statement_begin__ = 53;
                        for (int j = 1; j <= (i - 1); ++j) {

                            current_statement_begin__ = 54;
                            stan::math::assign(get_base1_lhs(get_base1_lhs(get_base1_lhs(get_base1_lhs(s_ijtk,i,"s_ijtk",1),j,"s_ijtk",2),t,"s_ijtk",3),k,"s_ijtk",4), ((get_base1(get_base1(mu_kt,k,"mu_kt",1),t,"mu_kt",2) + multiply(transpose(get_base1(get_base1(x_h_it_shared,i,"x_h_it_shared",1),t,"x_h_it_shared",2)),get_base1(get_base1(x_h_it_shared,j,"x_h_it_shared",1),t,"x_h_it_shared",2))) + multiply(transpose(get_base1(get_base1(get_base1(x_h_itk,i,"x_h_itk",1),t,"x_h_itk",2),k,"x_h_itk",3)),get_base1(get_base1(get_base1(x_h_itk,j,"x_h_itk",1),t,"x_h_itk",2),k,"x_h_itk",3))));
                        }
                    }
                }
            }
            current_statement_begin__ = 60;
            stan::math::assign(get_base1_lhs(tau_h_shared,1,"tau_h_shared",1), get_base1(nu_h_shared,1,"nu_h_shared",1));
            current_statement_begin__ = 61;
            stan::math::assign(get_base1_lhs(tau_hk,1,"tau_hk",1), get_base1(nu_hk,1,"nu_hk",1));
            current_statement_begin__ = 62;
            for (int h = 2; h <= H_dim; ++h) {

                current_statement_begin__ = 63;
                stan::math::assign(get_base1_lhs(tau_h_shared,h,"tau_h_shared",1), (get_base1(tau_h_shared,(h - 1),"tau_h_shared",1) * get_base1(nu_h_shared,h,"nu_h_shared",1)));
                current_statement_begin__ = 64;
                stan::math::assign(get_base1_lhs(tau_hk,h,"tau_hk",1), elt_multiply(get_base1(tau_hk,(h - 1),"tau_hk",1),get_base1(nu_hk,h,"nu_hk",1)));
            }

            // validate transformed parameters
            current_statement_begin__ = 33;
            current_statement_begin__ = 34;
            current_statement_begin__ = 35;
            current_statement_begin__ = 36;
            current_statement_begin__ = 37;

            // write transformed parameters
            for (int k_2__ = 0; k_2__ < H_dim; ++k_2__) {
                for (int k_1__ = 0; k_1__ < T_net; ++k_1__) {
                    for (int k_0__ = 0; k_0__ < V_net; ++k_0__) {
                    vars__.push_back(x_h_it_shared[k_0__][k_1__][k_2__]);
                    }
                }
            }
            for (int k_3__ = 0; k_3__ < H_dim; ++k_3__) {
                for (int k_2__ = 0; k_2__ < K_net; ++k_2__) {
                    for (int k_1__ = 0; k_1__ < T_net; ++k_1__) {
                        for (int k_0__ = 0; k_0__ < V_net; ++k_0__) {
                        vars__.push_back(x_h_itk[k_0__][k_1__][k_2__][k_3__]);
                        }
                    }
                }
            }
            for (int k_3__ = 0; k_3__ < K_net; ++k_3__) {
                for (int k_2__ = 0; k_2__ < T_net; ++k_2__) {
                    for (int k_1__ = 0; k_1__ < V_net; ++k_1__) {
                        for (int k_0__ = 0; k_0__ < V_net; ++k_0__) {
                        vars__.push_back(s_ijtk[k_0__][k_1__][k_2__][k_3__]);
                        }
                    }
                }
            }
            for (int k_0__ = 0; k_0__ < H_dim; ++k_0__) {
            vars__.push_back(tau_h_shared[k_0__]);
            }
            for (int k_1__ = 0; k_1__ < K_net; ++k_1__) {
                for (int k_0__ = 0; k_0__ < H_dim; ++k_0__) {
                vars__.push_back(tau_hk(k_0__, k_1__));
                }
            }

            if (!include_gqs__) return;
            // declare and define generated quantities



            // validate generated quantities

            // write generated quantities
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_net_d_0_w_0";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_2__ = 1; k_2__ <= T_net; ++k_2__) {
            for (int k_1__ = 1; k_1__ <= H_dim; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= V_net; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "x_t_ih_shared" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_3__ = 1; k_3__ <= T_net; ++k_3__) {
            for (int k_2__ = 1; k_2__ <= K_net; ++k_2__) {
                for (int k_1__ = 1; k_1__ <= R_dim; ++k_1__) {
                    for (int k_0__ = 1; k_0__ <= V_net; ++k_0__) {
                        param_name_stream__.str(std::string());
                        param_name_stream__ << "x_t_ihk" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__ << '.' << k_3__;
                        param_names__.push_back(param_name_stream__.str());
                    }
                }
            }
        }
        for (int k_1__ = 1; k_1__ <= T_net; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= K_net; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_kt" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= H_dim; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "nu_h_shared" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= K_net; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= H_dim; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "nu_hk" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_2__ = 1; k_2__ <= H_dim; ++k_2__) {
            for (int k_1__ = 1; k_1__ <= T_net; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= V_net; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "x_h_it_shared" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_3__ = 1; k_3__ <= H_dim; ++k_3__) {
            for (int k_2__ = 1; k_2__ <= K_net; ++k_2__) {
                for (int k_1__ = 1; k_1__ <= T_net; ++k_1__) {
                    for (int k_0__ = 1; k_0__ <= V_net; ++k_0__) {
                        param_name_stream__.str(std::string());
                        param_name_stream__ << "x_h_itk" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__ << '.' << k_3__;
                        param_names__.push_back(param_name_stream__.str());
                    }
                }
            }
        }
        for (int k_3__ = 1; k_3__ <= K_net; ++k_3__) {
            for (int k_2__ = 1; k_2__ <= T_net; ++k_2__) {
                for (int k_1__ = 1; k_1__ <= V_net; ++k_1__) {
                    for (int k_0__ = 1; k_0__ <= V_net; ++k_0__) {
                        param_name_stream__.str(std::string());
                        param_name_stream__ << "s_ijtk" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__ << '.' << k_3__;
                        param_names__.push_back(param_name_stream__.str());
                    }
                }
            }
        }
        for (int k_0__ = 1; k_0__ <= H_dim; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau_h_shared" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= K_net; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= H_dim; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "tau_hk" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_2__ = 1; k_2__ <= T_net; ++k_2__) {
            for (int k_1__ = 1; k_1__ <= H_dim; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= V_net; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "x_t_ih_shared" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_3__ = 1; k_3__ <= T_net; ++k_3__) {
            for (int k_2__ = 1; k_2__ <= K_net; ++k_2__) {
                for (int k_1__ = 1; k_1__ <= R_dim; ++k_1__) {
                    for (int k_0__ = 1; k_0__ <= V_net; ++k_0__) {
                        param_name_stream__.str(std::string());
                        param_name_stream__ << "x_t_ihk" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__ << '.' << k_3__;
                        param_names__.push_back(param_name_stream__.str());
                    }
                }
            }
        }
        for (int k_1__ = 1; k_1__ <= T_net; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= K_net; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_kt" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= H_dim; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "nu_h_shared" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= K_net; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= H_dim; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "nu_hk" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_2__ = 1; k_2__ <= H_dim; ++k_2__) {
            for (int k_1__ = 1; k_1__ <= T_net; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= V_net; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "x_h_it_shared" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_3__ = 1; k_3__ <= H_dim; ++k_3__) {
            for (int k_2__ = 1; k_2__ <= K_net; ++k_2__) {
                for (int k_1__ = 1; k_1__ <= T_net; ++k_1__) {
                    for (int k_0__ = 1; k_0__ <= V_net; ++k_0__) {
                        param_name_stream__.str(std::string());
                        param_name_stream__ << "x_h_itk" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__ << '.' << k_3__;
                        param_names__.push_back(param_name_stream__.str());
                    }
                }
            }
        }
        for (int k_3__ = 1; k_3__ <= K_net; ++k_3__) {
            for (int k_2__ = 1; k_2__ <= T_net; ++k_2__) {
                for (int k_1__ = 1; k_1__ <= V_net; ++k_1__) {
                    for (int k_0__ = 1; k_0__ <= V_net; ++k_0__) {
                        param_name_stream__.str(std::string());
                        param_name_stream__ << "s_ijtk" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__ << '.' << k_3__;
                        param_names__.push_back(param_name_stream__.str());
                    }
                }
            }
        }
        for (int k_0__ = 1; k_0__ <= H_dim; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau_h_shared" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= K_net; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= H_dim; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "tau_hk" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
    }

}; // model

}

typedef model_net_d_0_w_0_namespace::model_net_d_0_w_0 stan_model;


#endif
