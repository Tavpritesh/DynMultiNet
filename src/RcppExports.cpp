// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/DynMultiNet.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// sample_baseline_t_link_GP_cpp
Rcpp::List sample_baseline_t_link_GP_cpp(arma::colvec eta_t, const arma::mat eta_t_cov_prior_inv, const arma::cube y_ijt, const arma::cube w_ijt, arma::cube gamma_ijt, const bool directed);
static SEXP _DynMultiNet_sample_baseline_t_link_GP_cpp_try(SEXP eta_tSEXP, SEXP eta_t_cov_prior_invSEXP, SEXP y_ijtSEXP, SEXP w_ijtSEXP, SEXP gamma_ijtSEXP, SEXP directedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::colvec >::type eta_t(eta_tSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type eta_t_cov_prior_inv(eta_t_cov_prior_invSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type y_ijt(y_ijtSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type w_ijt(w_ijtSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type gamma_ijt(gamma_ijtSEXP);
    Rcpp::traits::input_parameter< const bool >::type directed(directedSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_baseline_t_link_GP_cpp(eta_t, eta_t_cov_prior_inv, y_ijt, w_ijt, gamma_ijt, directed));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _DynMultiNet_sample_baseline_t_link_GP_cpp(SEXP eta_tSEXP, SEXP eta_t_cov_prior_invSEXP, SEXP y_ijtSEXP, SEXP w_ijtSEXP, SEXP gamma_ijtSEXP, SEXP directedSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_DynMultiNet_sample_baseline_t_link_GP_cpp_try(eta_tSEXP, eta_t_cov_prior_invSEXP, y_ijtSEXP, w_ijtSEXP, gamma_ijtSEXP, directedSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// sample_add_eff_it_link_cpp
Rcpp::List sample_add_eff_it_link_cpp(arma::colvec sp_it, const arma::mat sp_t_cov_prior_inv, const arma::cube y_ijt, arma::cube w_ijt, arma::cube gamma_ijt, const bool directed);
static SEXP _DynMultiNet_sample_add_eff_it_link_cpp_try(SEXP sp_itSEXP, SEXP sp_t_cov_prior_invSEXP, SEXP y_ijtSEXP, SEXP w_ijtSEXP, SEXP gamma_ijtSEXP, SEXP directedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::colvec >::type sp_it(sp_itSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type sp_t_cov_prior_inv(sp_t_cov_prior_invSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type y_ijt(y_ijtSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type w_ijt(w_ijtSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type gamma_ijt(gamma_ijtSEXP);
    Rcpp::traits::input_parameter< const bool >::type directed(directedSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_add_eff_it_link_cpp(sp_it, sp_t_cov_prior_inv, y_ijt, w_ijt, gamma_ijt, directed));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _DynMultiNet_sample_add_eff_it_link_cpp(SEXP sp_itSEXP, SEXP sp_t_cov_prior_invSEXP, SEXP y_ijtSEXP, SEXP w_ijtSEXP, SEXP gamma_ijtSEXP, SEXP directedSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_DynMultiNet_sample_add_eff_it_link_cpp_try(sp_itSEXP, sp_t_cov_prior_invSEXP, y_ijtSEXP, w_ijtSEXP, gamma_ijtSEXP, directedSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// sample_add_eff_it_shared_link_cpp
Rcpp::List sample_add_eff_it_shared_link_cpp(arma::colvec sp_it, const arma::mat sp_t_cov_prior_inv, const arma::field<arma::cube> y_ijtk, arma::field<arma::cube> w_ijtk, arma::field<arma::cube> gamma_ijtk, const bool directed);
static SEXP _DynMultiNet_sample_add_eff_it_shared_link_cpp_try(SEXP sp_itSEXP, SEXP sp_t_cov_prior_invSEXP, SEXP y_ijtkSEXP, SEXP w_ijtkSEXP, SEXP gamma_ijtkSEXP, SEXP directedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::colvec >::type sp_it(sp_itSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type sp_t_cov_prior_inv(sp_t_cov_prior_invSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::cube> >::type y_ijtk(y_ijtkSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::cube> >::type w_ijtk(w_ijtkSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::cube> >::type gamma_ijtk(gamma_ijtkSEXP);
    Rcpp::traits::input_parameter< const bool >::type directed(directedSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_add_eff_it_shared_link_cpp(sp_it, sp_t_cov_prior_inv, y_ijtk, w_ijtk, gamma_ijtk, directed));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _DynMultiNet_sample_add_eff_it_shared_link_cpp(SEXP sp_itSEXP, SEXP sp_t_cov_prior_invSEXP, SEXP y_ijtkSEXP, SEXP w_ijtkSEXP, SEXP gamma_ijtkSEXP, SEXP directedSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_DynMultiNet_sample_add_eff_it_shared_link_cpp_try(sp_itSEXP, sp_t_cov_prior_invSEXP, y_ijtkSEXP, w_ijtkSEXP, gamma_ijtkSEXP, directedSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// sample_coord_ith_link_cpp
Rcpp::List sample_coord_ith_link_cpp(arma::cube ab_ith, const arma::mat ab_t_sigma_prior_inv, const arma::colvec tau_h, const arma::cube y_ijt, const arma::cube w_ijt, arma::cube gamma_ijt);
static SEXP _DynMultiNet_sample_coord_ith_link_cpp_try(SEXP ab_ithSEXP, SEXP ab_t_sigma_prior_invSEXP, SEXP tau_hSEXP, SEXP y_ijtSEXP, SEXP w_ijtSEXP, SEXP gamma_ijtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::cube >::type ab_ith(ab_ithSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type ab_t_sigma_prior_inv(ab_t_sigma_prior_invSEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type tau_h(tau_hSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type y_ijt(y_ijtSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type w_ijt(w_ijtSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type gamma_ijt(gamma_ijtSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_coord_ith_link_cpp(ab_ith, ab_t_sigma_prior_inv, tau_h, y_ijt, w_ijt, gamma_ijt));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _DynMultiNet_sample_coord_ith_link_cpp(SEXP ab_ithSEXP, SEXP ab_t_sigma_prior_invSEXP, SEXP tau_hSEXP, SEXP y_ijtSEXP, SEXP w_ijtSEXP, SEXP gamma_ijtSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_DynMultiNet_sample_coord_ith_link_cpp_try(ab_ithSEXP, ab_t_sigma_prior_invSEXP, tau_hSEXP, y_ijtSEXP, w_ijtSEXP, gamma_ijtSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// sample_coord_ith_shared_link_cpp
Rcpp::List sample_coord_ith_shared_link_cpp(arma::cube ab_ith_shared, const arma::mat ab_t_sigma_prior_inv, const arma::colvec tau_h, const arma::field<arma::cube> y_ijtk, const arma::field<arma::cube> w_ijtk, arma::field<arma::cube> gamma_ijtk);
static SEXP _DynMultiNet_sample_coord_ith_shared_link_cpp_try(SEXP ab_ith_sharedSEXP, SEXP ab_t_sigma_prior_invSEXP, SEXP tau_hSEXP, SEXP y_ijtkSEXP, SEXP w_ijtkSEXP, SEXP gamma_ijtkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::cube >::type ab_ith_shared(ab_ith_sharedSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type ab_t_sigma_prior_inv(ab_t_sigma_prior_invSEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type tau_h(tau_hSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::cube> >::type y_ijtk(y_ijtkSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::cube> >::type w_ijtk(w_ijtkSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::cube> >::type gamma_ijtk(gamma_ijtkSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_coord_ith_shared_link_cpp(ab_ith_shared, ab_t_sigma_prior_inv, tau_h, y_ijtk, w_ijtk, gamma_ijtk));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _DynMultiNet_sample_coord_ith_shared_link_cpp(SEXP ab_ith_sharedSEXP, SEXP ab_t_sigma_prior_invSEXP, SEXP tau_hSEXP, SEXP y_ijtkSEXP, SEXP w_ijtkSEXP, SEXP gamma_ijtkSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_DynMultiNet_sample_coord_ith_shared_link_cpp_try(ab_ith_sharedSEXP, ab_t_sigma_prior_invSEXP, tau_hSEXP, y_ijtkSEXP, w_ijtkSEXP, gamma_ijtkSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// sample_coord_ith_link_dir_cpp
Rcpp::List sample_coord_ith_link_dir_cpp(arma::cube ab_ith_send, arma::cube ab_ith_receive, const arma::mat ab_t_sigma_prior_inv, const arma::colvec tau_h_send, const arma::colvec tau_h_receive, const arma::cube y_ijt, const arma::cube w_ijt, arma::cube gamma_ijt);
static SEXP _DynMultiNet_sample_coord_ith_link_dir_cpp_try(SEXP ab_ith_sendSEXP, SEXP ab_ith_receiveSEXP, SEXP ab_t_sigma_prior_invSEXP, SEXP tau_h_sendSEXP, SEXP tau_h_receiveSEXP, SEXP y_ijtSEXP, SEXP w_ijtSEXP, SEXP gamma_ijtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::cube >::type ab_ith_send(ab_ith_sendSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type ab_ith_receive(ab_ith_receiveSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type ab_t_sigma_prior_inv(ab_t_sigma_prior_invSEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type tau_h_send(tau_h_sendSEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type tau_h_receive(tau_h_receiveSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type y_ijt(y_ijtSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type w_ijt(w_ijtSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type gamma_ijt(gamma_ijtSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_coord_ith_link_dir_cpp(ab_ith_send, ab_ith_receive, ab_t_sigma_prior_inv, tau_h_send, tau_h_receive, y_ijt, w_ijt, gamma_ijt));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _DynMultiNet_sample_coord_ith_link_dir_cpp(SEXP ab_ith_sendSEXP, SEXP ab_ith_receiveSEXP, SEXP ab_t_sigma_prior_invSEXP, SEXP tau_h_sendSEXP, SEXP tau_h_receiveSEXP, SEXP y_ijtSEXP, SEXP w_ijtSEXP, SEXP gamma_ijtSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_DynMultiNet_sample_coord_ith_link_dir_cpp_try(ab_ith_sendSEXP, ab_ith_receiveSEXP, ab_t_sigma_prior_invSEXP, tau_h_sendSEXP, tau_h_receiveSEXP, y_ijtSEXP, w_ijtSEXP, gamma_ijtSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// sample_coord_ith_shared_link_dir_cpp
Rcpp::List sample_coord_ith_shared_link_dir_cpp(arma::cube ab_ith_shared_send, arma::cube ab_ith_shared_receive, const arma::mat ab_t_sigma_prior_inv, const arma::colvec tau_h_shared_send, const arma::colvec tau_h_shared_receive, const arma::field<arma::cube> y_ijtk, const arma::field<arma::cube> w_ijtk, arma::field<arma::cube> gamma_ijtk);
static SEXP _DynMultiNet_sample_coord_ith_shared_link_dir_cpp_try(SEXP ab_ith_shared_sendSEXP, SEXP ab_ith_shared_receiveSEXP, SEXP ab_t_sigma_prior_invSEXP, SEXP tau_h_shared_sendSEXP, SEXP tau_h_shared_receiveSEXP, SEXP y_ijtkSEXP, SEXP w_ijtkSEXP, SEXP gamma_ijtkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::cube >::type ab_ith_shared_send(ab_ith_shared_sendSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type ab_ith_shared_receive(ab_ith_shared_receiveSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type ab_t_sigma_prior_inv(ab_t_sigma_prior_invSEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type tau_h_shared_send(tau_h_shared_sendSEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type tau_h_shared_receive(tau_h_shared_receiveSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::cube> >::type y_ijtk(y_ijtkSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::cube> >::type w_ijtk(w_ijtkSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::cube> >::type gamma_ijtk(gamma_ijtkSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_coord_ith_shared_link_dir_cpp(ab_ith_shared_send, ab_ith_shared_receive, ab_t_sigma_prior_inv, tau_h_shared_send, tau_h_shared_receive, y_ijtk, w_ijtk, gamma_ijtk));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _DynMultiNet_sample_coord_ith_shared_link_dir_cpp(SEXP ab_ith_shared_sendSEXP, SEXP ab_ith_shared_receiveSEXP, SEXP ab_t_sigma_prior_invSEXP, SEXP tau_h_shared_sendSEXP, SEXP tau_h_shared_receiveSEXP, SEXP y_ijtkSEXP, SEXP w_ijtkSEXP, SEXP gamma_ijtkSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_DynMultiNet_sample_coord_ith_shared_link_dir_cpp_try(ab_ith_shared_sendSEXP, ab_ith_shared_receiveSEXP, ab_t_sigma_prior_invSEXP, tau_h_shared_sendSEXP, tau_h_shared_receiveSEXP, y_ijtkSEXP, w_ijtkSEXP, gamma_ijtkSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// sample_coeff_tp_link_cpp
Rcpp::List sample_coeff_tp_link_cpp(arma::mat beta_tp, const arma::mat beta_t_cov_prior_inv, const arma::field<arma::cube> y_ijtk, arma::field<arma::cube> w_ijtk, arma::field<arma::cube> gamma_ijtk, const arma::mat x_ijtkp_mat, const bool directed);
static SEXP _DynMultiNet_sample_coeff_tp_link_cpp_try(SEXP beta_tpSEXP, SEXP beta_t_cov_prior_invSEXP, SEXP y_ijtkSEXP, SEXP w_ijtkSEXP, SEXP gamma_ijtkSEXP, SEXP x_ijtkp_matSEXP, SEXP directedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::mat >::type beta_tp(beta_tpSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type beta_t_cov_prior_inv(beta_t_cov_prior_invSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::cube> >::type y_ijtk(y_ijtkSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::cube> >::type w_ijtk(w_ijtkSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::cube> >::type gamma_ijtk(gamma_ijtkSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type x_ijtkp_mat(x_ijtkp_matSEXP);
    Rcpp::traits::input_parameter< const bool >::type directed(directedSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_coeff_tp_link_cpp(beta_tp, beta_t_cov_prior_inv, y_ijtk, w_ijtk, gamma_ijtk, x_ijtkp_mat, directed));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _DynMultiNet_sample_coeff_tp_link_cpp(SEXP beta_tpSEXP, SEXP beta_t_cov_prior_invSEXP, SEXP y_ijtkSEXP, SEXP w_ijtkSEXP, SEXP gamma_ijtkSEXP, SEXP x_ijtkp_matSEXP, SEXP directedSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_DynMultiNet_sample_coeff_tp_link_cpp_try(beta_tpSEXP, beta_t_cov_prior_invSEXP, y_ijtkSEXP, w_ijtkSEXP, gamma_ijtkSEXP, x_ijtkp_matSEXP, directedSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// sample_baseline_t_link_nGP_cpp
Rcpp::List sample_baseline_t_link_nGP_cpp(arma::colvec eta_t, const arma::cube y_ijt, const arma::cube w_ijt, arma::cube gamma_ijt, const arma::cube nGP_G_t, const arma::cube nGP_H_t, const arma::cube nGP_Wchol_t, const bool directed);
static SEXP _DynMultiNet_sample_baseline_t_link_nGP_cpp_try(SEXP eta_tSEXP, SEXP y_ijtSEXP, SEXP w_ijtSEXP, SEXP gamma_ijtSEXP, SEXP nGP_G_tSEXP, SEXP nGP_H_tSEXP, SEXP nGP_Wchol_tSEXP, SEXP directedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::colvec >::type eta_t(eta_tSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type y_ijt(y_ijtSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type w_ijt(w_ijtSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type gamma_ijt(gamma_ijtSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type nGP_G_t(nGP_G_tSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type nGP_H_t(nGP_H_tSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type nGP_Wchol_t(nGP_Wchol_tSEXP);
    Rcpp::traits::input_parameter< const bool >::type directed(directedSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_baseline_t_link_nGP_cpp(eta_t, y_ijt, w_ijt, gamma_ijt, nGP_G_t, nGP_H_t, nGP_Wchol_t, directed));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _DynMultiNet_sample_baseline_t_link_nGP_cpp(SEXP eta_tSEXP, SEXP y_ijtSEXP, SEXP w_ijtSEXP, SEXP gamma_ijtSEXP, SEXP nGP_G_tSEXP, SEXP nGP_H_tSEXP, SEXP nGP_Wchol_tSEXP, SEXP directedSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_DynMultiNet_sample_baseline_t_link_nGP_cpp_try(eta_tSEXP, y_ijtSEXP, w_ijtSEXP, gamma_ijtSEXP, nGP_G_tSEXP, nGP_H_tSEXP, nGP_Wchol_tSEXP, directedSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// sample_baseline_tk_weight_cpp
Rcpp::List sample_baseline_tk_weight_cpp(arma::colvec theta_t, const arma::mat theta_t_cov_prior_inv, const arma::cube y_ijt, arma::cube mu_ijt, const double sigma_k, const bool directed);
static SEXP _DynMultiNet_sample_baseline_tk_weight_cpp_try(SEXP theta_tSEXP, SEXP theta_t_cov_prior_invSEXP, SEXP y_ijtSEXP, SEXP mu_ijtSEXP, SEXP sigma_kSEXP, SEXP directedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::colvec >::type theta_t(theta_tSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type theta_t_cov_prior_inv(theta_t_cov_prior_invSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type y_ijt(y_ijtSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type mu_ijt(mu_ijtSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma_k(sigma_kSEXP);
    Rcpp::traits::input_parameter< const bool >::type directed(directedSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_baseline_tk_weight_cpp(theta_t, theta_t_cov_prior_inv, y_ijt, mu_ijt, sigma_k, directed));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _DynMultiNet_sample_baseline_tk_weight_cpp(SEXP theta_tSEXP, SEXP theta_t_cov_prior_invSEXP, SEXP y_ijtSEXP, SEXP mu_ijtSEXP, SEXP sigma_kSEXP, SEXP directedSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_DynMultiNet_sample_baseline_tk_weight_cpp_try(theta_tSEXP, theta_t_cov_prior_invSEXP, y_ijtSEXP, mu_ijtSEXP, sigma_kSEXP, directedSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// sample_add_eff_it_weight_cpp
Rcpp::List sample_add_eff_it_weight_cpp(arma::colvec sp_it, const arma::mat sp_t_cov_prior_inv, const arma::cube y_ijt, arma::cube mu_ijt, const double sigma_k, const bool directed);
static SEXP _DynMultiNet_sample_add_eff_it_weight_cpp_try(SEXP sp_itSEXP, SEXP sp_t_cov_prior_invSEXP, SEXP y_ijtSEXP, SEXP mu_ijtSEXP, SEXP sigma_kSEXP, SEXP directedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::colvec >::type sp_it(sp_itSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type sp_t_cov_prior_inv(sp_t_cov_prior_invSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type y_ijt(y_ijtSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type mu_ijt(mu_ijtSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma_k(sigma_kSEXP);
    Rcpp::traits::input_parameter< const bool >::type directed(directedSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_add_eff_it_weight_cpp(sp_it, sp_t_cov_prior_inv, y_ijt, mu_ijt, sigma_k, directed));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _DynMultiNet_sample_add_eff_it_weight_cpp(SEXP sp_itSEXP, SEXP sp_t_cov_prior_invSEXP, SEXP y_ijtSEXP, SEXP mu_ijtSEXP, SEXP sigma_kSEXP, SEXP directedSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_DynMultiNet_sample_add_eff_it_weight_cpp_try(sp_itSEXP, sp_t_cov_prior_invSEXP, y_ijtSEXP, mu_ijtSEXP, sigma_kSEXP, directedSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// sample_add_eff_it_shared_weight_cpp
Rcpp::List sample_add_eff_it_shared_weight_cpp(arma::colvec sp_it, const arma::mat sp_t_cov_prior_inv, const arma::field<arma::cube> y_ijtk, arma::field<arma::cube> mu_ijtk, const arma::colvec sigma_k, const bool directed);
static SEXP _DynMultiNet_sample_add_eff_it_shared_weight_cpp_try(SEXP sp_itSEXP, SEXP sp_t_cov_prior_invSEXP, SEXP y_ijtkSEXP, SEXP mu_ijtkSEXP, SEXP sigma_kSEXP, SEXP directedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::colvec >::type sp_it(sp_itSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type sp_t_cov_prior_inv(sp_t_cov_prior_invSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::cube> >::type y_ijtk(y_ijtkSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::cube> >::type mu_ijtk(mu_ijtkSEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type sigma_k(sigma_kSEXP);
    Rcpp::traits::input_parameter< const bool >::type directed(directedSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_add_eff_it_shared_weight_cpp(sp_it, sp_t_cov_prior_inv, y_ijtk, mu_ijtk, sigma_k, directed));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _DynMultiNet_sample_add_eff_it_shared_weight_cpp(SEXP sp_itSEXP, SEXP sp_t_cov_prior_invSEXP, SEXP y_ijtkSEXP, SEXP mu_ijtkSEXP, SEXP sigma_kSEXP, SEXP directedSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_DynMultiNet_sample_add_eff_it_shared_weight_cpp_try(sp_itSEXP, sp_t_cov_prior_invSEXP, y_ijtkSEXP, mu_ijtkSEXP, sigma_kSEXP, directedSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// sample_coord_ith_weight_cpp
Rcpp::List sample_coord_ith_weight_cpp(arma::cube uv_ith, const arma::mat uv_t_sigma_prior_inv, const arma::colvec tau_h, const arma::cube y_ijt, arma::cube mu_ijt, const double sigma_k);
static SEXP _DynMultiNet_sample_coord_ith_weight_cpp_try(SEXP uv_ithSEXP, SEXP uv_t_sigma_prior_invSEXP, SEXP tau_hSEXP, SEXP y_ijtSEXP, SEXP mu_ijtSEXP, SEXP sigma_kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::cube >::type uv_ith(uv_ithSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type uv_t_sigma_prior_inv(uv_t_sigma_prior_invSEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type tau_h(tau_hSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type y_ijt(y_ijtSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type mu_ijt(mu_ijtSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma_k(sigma_kSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_coord_ith_weight_cpp(uv_ith, uv_t_sigma_prior_inv, tau_h, y_ijt, mu_ijt, sigma_k));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _DynMultiNet_sample_coord_ith_weight_cpp(SEXP uv_ithSEXP, SEXP uv_t_sigma_prior_invSEXP, SEXP tau_hSEXP, SEXP y_ijtSEXP, SEXP mu_ijtSEXP, SEXP sigma_kSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_DynMultiNet_sample_coord_ith_weight_cpp_try(uv_ithSEXP, uv_t_sigma_prior_invSEXP, tau_hSEXP, y_ijtSEXP, mu_ijtSEXP, sigma_kSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// sample_coord_ith_shared_weight_cpp
Rcpp::List sample_coord_ith_shared_weight_cpp(arma::cube uv_ith_shared, const arma::mat uv_t_sigma_prior_inv, const arma::colvec tau_h, const arma::field<arma::cube> y_ijtk, arma::field<arma::cube> mu_ijtk, const arma::colvec sigma_k);
static SEXP _DynMultiNet_sample_coord_ith_shared_weight_cpp_try(SEXP uv_ith_sharedSEXP, SEXP uv_t_sigma_prior_invSEXP, SEXP tau_hSEXP, SEXP y_ijtkSEXP, SEXP mu_ijtkSEXP, SEXP sigma_kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::cube >::type uv_ith_shared(uv_ith_sharedSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type uv_t_sigma_prior_inv(uv_t_sigma_prior_invSEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type tau_h(tau_hSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::cube> >::type y_ijtk(y_ijtkSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::cube> >::type mu_ijtk(mu_ijtkSEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type sigma_k(sigma_kSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_coord_ith_shared_weight_cpp(uv_ith_shared, uv_t_sigma_prior_inv, tau_h, y_ijtk, mu_ijtk, sigma_k));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _DynMultiNet_sample_coord_ith_shared_weight_cpp(SEXP uv_ith_sharedSEXP, SEXP uv_t_sigma_prior_invSEXP, SEXP tau_hSEXP, SEXP y_ijtkSEXP, SEXP mu_ijtkSEXP, SEXP sigma_kSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_DynMultiNet_sample_coord_ith_shared_weight_cpp_try(uv_ith_sharedSEXP, uv_t_sigma_prior_invSEXP, tau_hSEXP, y_ijtkSEXP, mu_ijtkSEXP, sigma_kSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// sample_coord_ith_weight_dir_cpp
Rcpp::List sample_coord_ith_weight_dir_cpp(arma::cube u_ith, arma::cube v_ith, const arma::mat uv_t_sigma_prior_inv, const arma::colvec tau_h_send, const arma::colvec tau_h_receive, const arma::cube y_ijt, arma::cube mu_ijt, const double sigma_k);
static SEXP _DynMultiNet_sample_coord_ith_weight_dir_cpp_try(SEXP u_ithSEXP, SEXP v_ithSEXP, SEXP uv_t_sigma_prior_invSEXP, SEXP tau_h_sendSEXP, SEXP tau_h_receiveSEXP, SEXP y_ijtSEXP, SEXP mu_ijtSEXP, SEXP sigma_kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::cube >::type u_ith(u_ithSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type v_ith(v_ithSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type uv_t_sigma_prior_inv(uv_t_sigma_prior_invSEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type tau_h_send(tau_h_sendSEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type tau_h_receive(tau_h_receiveSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type y_ijt(y_ijtSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type mu_ijt(mu_ijtSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma_k(sigma_kSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_coord_ith_weight_dir_cpp(u_ith, v_ith, uv_t_sigma_prior_inv, tau_h_send, tau_h_receive, y_ijt, mu_ijt, sigma_k));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _DynMultiNet_sample_coord_ith_weight_dir_cpp(SEXP u_ithSEXP, SEXP v_ithSEXP, SEXP uv_t_sigma_prior_invSEXP, SEXP tau_h_sendSEXP, SEXP tau_h_receiveSEXP, SEXP y_ijtSEXP, SEXP mu_ijtSEXP, SEXP sigma_kSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_DynMultiNet_sample_coord_ith_weight_dir_cpp_try(u_ithSEXP, v_ithSEXP, uv_t_sigma_prior_invSEXP, tau_h_sendSEXP, tau_h_receiveSEXP, y_ijtSEXP, mu_ijtSEXP, sigma_kSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// sample_coord_ith_shared_weight_dir_cpp
Rcpp::List sample_coord_ith_shared_weight_dir_cpp(arma::cube u_ith_shared, arma::cube v_ith_shared, const arma::mat uv_t_sigma_prior_inv, const arma::colvec tau_h_shared_send, const arma::colvec tau_h_shared_receive, const arma::field<arma::cube> y_ijtk, arma::field<arma::cube> mu_ijtk, const arma::colvec sigma_k);
static SEXP _DynMultiNet_sample_coord_ith_shared_weight_dir_cpp_try(SEXP u_ith_sharedSEXP, SEXP v_ith_sharedSEXP, SEXP uv_t_sigma_prior_invSEXP, SEXP tau_h_shared_sendSEXP, SEXP tau_h_shared_receiveSEXP, SEXP y_ijtkSEXP, SEXP mu_ijtkSEXP, SEXP sigma_kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::cube >::type u_ith_shared(u_ith_sharedSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type v_ith_shared(v_ith_sharedSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type uv_t_sigma_prior_inv(uv_t_sigma_prior_invSEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type tau_h_shared_send(tau_h_shared_sendSEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type tau_h_shared_receive(tau_h_shared_receiveSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::cube> >::type y_ijtk(y_ijtkSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::cube> >::type mu_ijtk(mu_ijtkSEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type sigma_k(sigma_kSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_coord_ith_shared_weight_dir_cpp(u_ith_shared, v_ith_shared, uv_t_sigma_prior_inv, tau_h_shared_send, tau_h_shared_receive, y_ijtk, mu_ijtk, sigma_k));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _DynMultiNet_sample_coord_ith_shared_weight_dir_cpp(SEXP u_ith_sharedSEXP, SEXP v_ith_sharedSEXP, SEXP uv_t_sigma_prior_invSEXP, SEXP tau_h_shared_sendSEXP, SEXP tau_h_shared_receiveSEXP, SEXP y_ijtkSEXP, SEXP mu_ijtkSEXP, SEXP sigma_kSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_DynMultiNet_sample_coord_ith_shared_weight_dir_cpp_try(u_ith_sharedSEXP, v_ith_sharedSEXP, uv_t_sigma_prior_invSEXP, tau_h_shared_sendSEXP, tau_h_shared_receiveSEXP, y_ijtkSEXP, mu_ijtkSEXP, sigma_kSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// sample_coeff_tp_weight_cpp
Rcpp::List sample_coeff_tp_weight_cpp(arma::mat beta_tp, const arma::mat beta_t_cov_prior_inv, const arma::field<arma::cube> y_ijtk, arma::field<arma::cube> mu_ijtk, const arma::colvec sigma_k, const arma::mat x_ijtkp_mat, const bool directed);
static SEXP _DynMultiNet_sample_coeff_tp_weight_cpp_try(SEXP beta_tpSEXP, SEXP beta_t_cov_prior_invSEXP, SEXP y_ijtkSEXP, SEXP mu_ijtkSEXP, SEXP sigma_kSEXP, SEXP x_ijtkp_matSEXP, SEXP directedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::mat >::type beta_tp(beta_tpSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type beta_t_cov_prior_inv(beta_t_cov_prior_invSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::cube> >::type y_ijtk(y_ijtkSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::cube> >::type mu_ijtk(mu_ijtkSEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type sigma_k(sigma_kSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type x_ijtkp_mat(x_ijtkp_matSEXP);
    Rcpp::traits::input_parameter< const bool >::type directed(directedSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_coeff_tp_weight_cpp(beta_tp, beta_t_cov_prior_inv, y_ijtk, mu_ijtk, sigma_k, x_ijtkp_mat, directed));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _DynMultiNet_sample_coeff_tp_weight_cpp(SEXP beta_tpSEXP, SEXP beta_t_cov_prior_invSEXP, SEXP y_ijtkSEXP, SEXP mu_ijtkSEXP, SEXP sigma_kSEXP, SEXP x_ijtkp_matSEXP, SEXP directedSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_DynMultiNet_sample_coeff_tp_weight_cpp_try(beta_tpSEXP, beta_t_cov_prior_invSEXP, y_ijtkSEXP, mu_ijtkSEXP, sigma_kSEXP, x_ijtkp_matSEXP, directedSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// sample_var_weight_cpp
double sample_var_weight_cpp(double sigma_k, double sigma_k_prop_int, const arma::cube y_ijt, const arma::cube mu_ijt, const bool directed);
static SEXP _DynMultiNet_sample_var_weight_cpp_try(SEXP sigma_kSEXP, SEXP sigma_k_prop_intSEXP, SEXP y_ijtSEXP, SEXP mu_ijtSEXP, SEXP directedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< double >::type sigma_k(sigma_kSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_k_prop_int(sigma_k_prop_intSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type y_ijt(y_ijtSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type mu_ijt(mu_ijtSEXP);
    Rcpp::traits::input_parameter< const bool >::type directed(directedSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_var_weight_cpp(sigma_k, sigma_k_prop_int, y_ijt, mu_ijt, directed));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _DynMultiNet_sample_var_weight_cpp(SEXP sigma_kSEXP, SEXP sigma_k_prop_intSEXP, SEXP y_ijtSEXP, SEXP mu_ijtSEXP, SEXP directedSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_DynMultiNet_sample_var_weight_cpp_try(sigma_kSEXP, sigma_k_prop_intSEXP, y_ijtSEXP, mu_ijtSEXP, directedSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// kfsim
Rcpp::List kfsim(const arma::mat y, const arma::mat dd, const arma::cube ZZ, const arma::cube HHchol, const arma::mat cc, const arma::cube TT, const arma::cube RR, const arma::cube QQchol, const arma::colvec a1, const arma::mat P1chol, const unsigned int ind_output, const bool verbose);
static SEXP _DynMultiNet_kfsim_try(SEXP ySEXP, SEXP ddSEXP, SEXP ZZSEXP, SEXP HHcholSEXP, SEXP ccSEXP, SEXP TTSEXP, SEXP RRSEXP, SEXP QQcholSEXP, SEXP a1SEXP, SEXP P1cholSEXP, SEXP ind_outputSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type dd(ddSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type ZZ(ZZSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type HHchol(HHcholSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type cc(ccSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type TT(TTSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type RR(RRSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type QQchol(QQcholSEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type P1chol(P1cholSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type ind_output(ind_outputSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(kfsim(y, dd, ZZ, HHchol, cc, TT, RR, QQchol, a1, P1chol, ind_output, verbose));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _DynMultiNet_kfsim(SEXP ySEXP, SEXP ddSEXP, SEXP ZZSEXP, SEXP HHcholSEXP, SEXP ccSEXP, SEXP TTSEXP, SEXP RRSEXP, SEXP QQcholSEXP, SEXP a1SEXP, SEXP P1cholSEXP, SEXP ind_outputSEXP, SEXP verboseSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_DynMultiNet_kfsim_try(ySEXP, ddSEXP, ZZSEXP, HHcholSEXP, ccSEXP, TTSEXP, RRSEXP, QQcholSEXP, a1SEXP, P1cholSEXP, ind_outputSEXP, verboseSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// kfsim_cpp
arma::mat kfsim_cpp(const arma::mat y, const arma::mat dd, const arma::cube ZZ, const arma::cube HHchol, const arma::mat cc, const arma::cube TT, const arma::cube RR, const arma::cube QQchol, const arma::colvec a1, const arma::mat P1chol);
static SEXP _DynMultiNet_kfsim_cpp_try(SEXP ySEXP, SEXP ddSEXP, SEXP ZZSEXP, SEXP HHcholSEXP, SEXP ccSEXP, SEXP TTSEXP, SEXP RRSEXP, SEXP QQcholSEXP, SEXP a1SEXP, SEXP P1cholSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type dd(ddSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type ZZ(ZZSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type HHchol(HHcholSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type cc(ccSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type TT(TTSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type RR(RRSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type QQchol(QQcholSEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type P1chol(P1cholSEXP);
    rcpp_result_gen = Rcpp::wrap(kfsim_cpp(y, dd, ZZ, HHchol, cc, TT, RR, QQchol, a1, P1chol));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _DynMultiNet_kfsim_cpp(SEXP ySEXP, SEXP ddSEXP, SEXP ZZSEXP, SEXP HHcholSEXP, SEXP ccSEXP, SEXP TTSEXP, SEXP RRSEXP, SEXP QQcholSEXP, SEXP a1SEXP, SEXP P1cholSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_DynMultiNet_kfsim_cpp_try(ySEXP, ddSEXP, ZZSEXP, HHcholSEXP, ccSEXP, TTSEXP, RRSEXP, QQcholSEXP, a1SEXP, P1cholSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int _DynMultiNet_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("Rcpp::List(*sample_baseline_t_link_GP_cpp)(arma::colvec,const arma::mat,const arma::cube,const arma::cube,arma::cube,const bool)");
        signatures.insert("Rcpp::List(*sample_add_eff_it_link_cpp)(arma::colvec,const arma::mat,const arma::cube,arma::cube,arma::cube,const bool)");
        signatures.insert("Rcpp::List(*sample_add_eff_it_shared_link_cpp)(arma::colvec,const arma::mat,const arma::field<arma::cube>,arma::field<arma::cube>,arma::field<arma::cube>,const bool)");
        signatures.insert("Rcpp::List(*sample_coord_ith_link_cpp)(arma::cube,const arma::mat,const arma::colvec,const arma::cube,const arma::cube,arma::cube)");
        signatures.insert("Rcpp::List(*sample_coord_ith_shared_link_cpp)(arma::cube,const arma::mat,const arma::colvec,const arma::field<arma::cube>,const arma::field<arma::cube>,arma::field<arma::cube>)");
        signatures.insert("Rcpp::List(*sample_coord_ith_link_dir_cpp)(arma::cube,arma::cube,const arma::mat,const arma::colvec,const arma::colvec,const arma::cube,const arma::cube,arma::cube)");
        signatures.insert("Rcpp::List(*sample_coord_ith_shared_link_dir_cpp)(arma::cube,arma::cube,const arma::mat,const arma::colvec,const arma::colvec,const arma::field<arma::cube>,const arma::field<arma::cube>,arma::field<arma::cube>)");
        signatures.insert("Rcpp::List(*sample_coeff_tp_link_cpp)(arma::mat,const arma::mat,const arma::field<arma::cube>,arma::field<arma::cube>,arma::field<arma::cube>,const arma::mat,const bool)");
        signatures.insert("Rcpp::List(*sample_baseline_t_link_nGP_cpp)(arma::colvec,const arma::cube,const arma::cube,arma::cube,const arma::cube,const arma::cube,const arma::cube,const bool)");
        signatures.insert("Rcpp::List(*sample_baseline_tk_weight_cpp)(arma::colvec,const arma::mat,const arma::cube,arma::cube,const double,const bool)");
        signatures.insert("Rcpp::List(*sample_add_eff_it_weight_cpp)(arma::colvec,const arma::mat,const arma::cube,arma::cube,const double,const bool)");
        signatures.insert("Rcpp::List(*sample_add_eff_it_shared_weight_cpp)(arma::colvec,const arma::mat,const arma::field<arma::cube>,arma::field<arma::cube>,const arma::colvec,const bool)");
        signatures.insert("Rcpp::List(*sample_coord_ith_weight_cpp)(arma::cube,const arma::mat,const arma::colvec,const arma::cube,arma::cube,const double)");
        signatures.insert("Rcpp::List(*sample_coord_ith_shared_weight_cpp)(arma::cube,const arma::mat,const arma::colvec,const arma::field<arma::cube>,arma::field<arma::cube>,const arma::colvec)");
        signatures.insert("Rcpp::List(*sample_coord_ith_weight_dir_cpp)(arma::cube,arma::cube,const arma::mat,const arma::colvec,const arma::colvec,const arma::cube,arma::cube,const double)");
        signatures.insert("Rcpp::List(*sample_coord_ith_shared_weight_dir_cpp)(arma::cube,arma::cube,const arma::mat,const arma::colvec,const arma::colvec,const arma::field<arma::cube>,arma::field<arma::cube>,const arma::colvec)");
        signatures.insert("Rcpp::List(*sample_coeff_tp_weight_cpp)(arma::mat,const arma::mat,const arma::field<arma::cube>,arma::field<arma::cube>,const arma::colvec,const arma::mat,const bool)");
        signatures.insert("double(*sample_var_weight_cpp)(double,double,const arma::cube,const arma::cube,const bool)");
        signatures.insert("Rcpp::List(*kfsim)(const arma::mat,const arma::mat,const arma::cube,const arma::cube,const arma::mat,const arma::cube,const arma::cube,const arma::cube,const arma::colvec,const arma::mat,const unsigned int,const bool)");
        signatures.insert("arma::mat(*kfsim_cpp)(const arma::mat,const arma::mat,const arma::cube,const arma::cube,const arma::mat,const arma::cube,const arma::cube,const arma::cube,const arma::colvec,const arma::mat)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _DynMultiNet_RcppExport_registerCCallable() { 
    R_RegisterCCallable("DynMultiNet", "_DynMultiNet_sample_baseline_t_link_GP_cpp", (DL_FUNC)_DynMultiNet_sample_baseline_t_link_GP_cpp_try);
    R_RegisterCCallable("DynMultiNet", "_DynMultiNet_sample_add_eff_it_link_cpp", (DL_FUNC)_DynMultiNet_sample_add_eff_it_link_cpp_try);
    R_RegisterCCallable("DynMultiNet", "_DynMultiNet_sample_add_eff_it_shared_link_cpp", (DL_FUNC)_DynMultiNet_sample_add_eff_it_shared_link_cpp_try);
    R_RegisterCCallable("DynMultiNet", "_DynMultiNet_sample_coord_ith_link_cpp", (DL_FUNC)_DynMultiNet_sample_coord_ith_link_cpp_try);
    R_RegisterCCallable("DynMultiNet", "_DynMultiNet_sample_coord_ith_shared_link_cpp", (DL_FUNC)_DynMultiNet_sample_coord_ith_shared_link_cpp_try);
    R_RegisterCCallable("DynMultiNet", "_DynMultiNet_sample_coord_ith_link_dir_cpp", (DL_FUNC)_DynMultiNet_sample_coord_ith_link_dir_cpp_try);
    R_RegisterCCallable("DynMultiNet", "_DynMultiNet_sample_coord_ith_shared_link_dir_cpp", (DL_FUNC)_DynMultiNet_sample_coord_ith_shared_link_dir_cpp_try);
    R_RegisterCCallable("DynMultiNet", "_DynMultiNet_sample_coeff_tp_link_cpp", (DL_FUNC)_DynMultiNet_sample_coeff_tp_link_cpp_try);
    R_RegisterCCallable("DynMultiNet", "_DynMultiNet_sample_baseline_t_link_nGP_cpp", (DL_FUNC)_DynMultiNet_sample_baseline_t_link_nGP_cpp_try);
    R_RegisterCCallable("DynMultiNet", "_DynMultiNet_sample_baseline_tk_weight_cpp", (DL_FUNC)_DynMultiNet_sample_baseline_tk_weight_cpp_try);
    R_RegisterCCallable("DynMultiNet", "_DynMultiNet_sample_add_eff_it_weight_cpp", (DL_FUNC)_DynMultiNet_sample_add_eff_it_weight_cpp_try);
    R_RegisterCCallable("DynMultiNet", "_DynMultiNet_sample_add_eff_it_shared_weight_cpp", (DL_FUNC)_DynMultiNet_sample_add_eff_it_shared_weight_cpp_try);
    R_RegisterCCallable("DynMultiNet", "_DynMultiNet_sample_coord_ith_weight_cpp", (DL_FUNC)_DynMultiNet_sample_coord_ith_weight_cpp_try);
    R_RegisterCCallable("DynMultiNet", "_DynMultiNet_sample_coord_ith_shared_weight_cpp", (DL_FUNC)_DynMultiNet_sample_coord_ith_shared_weight_cpp_try);
    R_RegisterCCallable("DynMultiNet", "_DynMultiNet_sample_coord_ith_weight_dir_cpp", (DL_FUNC)_DynMultiNet_sample_coord_ith_weight_dir_cpp_try);
    R_RegisterCCallable("DynMultiNet", "_DynMultiNet_sample_coord_ith_shared_weight_dir_cpp", (DL_FUNC)_DynMultiNet_sample_coord_ith_shared_weight_dir_cpp_try);
    R_RegisterCCallable("DynMultiNet", "_DynMultiNet_sample_coeff_tp_weight_cpp", (DL_FUNC)_DynMultiNet_sample_coeff_tp_weight_cpp_try);
    R_RegisterCCallable("DynMultiNet", "_DynMultiNet_sample_var_weight_cpp", (DL_FUNC)_DynMultiNet_sample_var_weight_cpp_try);
    R_RegisterCCallable("DynMultiNet", "_DynMultiNet_kfsim", (DL_FUNC)_DynMultiNet_kfsim_try);
    R_RegisterCCallable("DynMultiNet", "_DynMultiNet_kfsim_cpp", (DL_FUNC)_DynMultiNet_kfsim_cpp_try);
    R_RegisterCCallable("DynMultiNet", "_DynMultiNet_RcppExport_validate", (DL_FUNC)_DynMultiNet_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_DynMultiNet_sample_baseline_t_link_GP_cpp", (DL_FUNC) &_DynMultiNet_sample_baseline_t_link_GP_cpp, 6},
    {"_DynMultiNet_sample_add_eff_it_link_cpp", (DL_FUNC) &_DynMultiNet_sample_add_eff_it_link_cpp, 6},
    {"_DynMultiNet_sample_add_eff_it_shared_link_cpp", (DL_FUNC) &_DynMultiNet_sample_add_eff_it_shared_link_cpp, 6},
    {"_DynMultiNet_sample_coord_ith_link_cpp", (DL_FUNC) &_DynMultiNet_sample_coord_ith_link_cpp, 6},
    {"_DynMultiNet_sample_coord_ith_shared_link_cpp", (DL_FUNC) &_DynMultiNet_sample_coord_ith_shared_link_cpp, 6},
    {"_DynMultiNet_sample_coord_ith_link_dir_cpp", (DL_FUNC) &_DynMultiNet_sample_coord_ith_link_dir_cpp, 8},
    {"_DynMultiNet_sample_coord_ith_shared_link_dir_cpp", (DL_FUNC) &_DynMultiNet_sample_coord_ith_shared_link_dir_cpp, 8},
    {"_DynMultiNet_sample_coeff_tp_link_cpp", (DL_FUNC) &_DynMultiNet_sample_coeff_tp_link_cpp, 7},
    {"_DynMultiNet_sample_baseline_t_link_nGP_cpp", (DL_FUNC) &_DynMultiNet_sample_baseline_t_link_nGP_cpp, 8},
    {"_DynMultiNet_sample_baseline_tk_weight_cpp", (DL_FUNC) &_DynMultiNet_sample_baseline_tk_weight_cpp, 6},
    {"_DynMultiNet_sample_add_eff_it_weight_cpp", (DL_FUNC) &_DynMultiNet_sample_add_eff_it_weight_cpp, 6},
    {"_DynMultiNet_sample_add_eff_it_shared_weight_cpp", (DL_FUNC) &_DynMultiNet_sample_add_eff_it_shared_weight_cpp, 6},
    {"_DynMultiNet_sample_coord_ith_weight_cpp", (DL_FUNC) &_DynMultiNet_sample_coord_ith_weight_cpp, 6},
    {"_DynMultiNet_sample_coord_ith_shared_weight_cpp", (DL_FUNC) &_DynMultiNet_sample_coord_ith_shared_weight_cpp, 6},
    {"_DynMultiNet_sample_coord_ith_weight_dir_cpp", (DL_FUNC) &_DynMultiNet_sample_coord_ith_weight_dir_cpp, 8},
    {"_DynMultiNet_sample_coord_ith_shared_weight_dir_cpp", (DL_FUNC) &_DynMultiNet_sample_coord_ith_shared_weight_dir_cpp, 8},
    {"_DynMultiNet_sample_coeff_tp_weight_cpp", (DL_FUNC) &_DynMultiNet_sample_coeff_tp_weight_cpp, 7},
    {"_DynMultiNet_sample_var_weight_cpp", (DL_FUNC) &_DynMultiNet_sample_var_weight_cpp, 5},
    {"_DynMultiNet_kfsim", (DL_FUNC) &_DynMultiNet_kfsim, 12},
    {"_DynMultiNet_kfsim_cpp", (DL_FUNC) &_DynMultiNet_kfsim_cpp, 10},
    {"_DynMultiNet_RcppExport_registerCCallable", (DL_FUNC) &_DynMultiNet_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_DynMultiNet(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
